{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The pypath book"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Introduction\" data-toc-modified-id=\"Introduction-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Introduction</a></span></li><li><span><a href=\"#Build,-load-and-save-databases\" data-toc-modified-id=\"Build,-load-and-save-databases-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Build, load and save databases</a></span><ul class=\"toc-item\"><li><span><a href=\"#The-OmniPath-app\" data-toc-modified-id=\"The-OmniPath-app-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;</span>The OmniPath app</a></span></li><li><span><a href=\"#Built-in-database-definitions\" data-toc-modified-id=\"Built-in-database-definitions-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;</span>Built-in database definitions</a></span></li><li><span><a href=\"#Networks\" data-toc-modified-id=\"Networks-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;</span>Networks</a></span><ul class=\"toc-item\"><li><span><a href=\"#Strictly-literature-curated-network\" data-toc-modified-id=\"Strictly-literature-curated-network-2.3.1\"><span class=\"toc-item-num\">2.3.1&nbsp;&nbsp;</span>Strictly literature curated network</a></span></li><li><span><a href=\"#The-OmniPath-network-with-extra-activity-flow,-enzyme-substrate-and-ligand-receptor-interactions\" data-toc-modified-id=\"The-OmniPath-network-with-extra-activity-flow,-enzyme-substrate-and-ligand-receptor-interactions-2.3.2\"><span class=\"toc-item-num\">2.3.2&nbsp;&nbsp;</span>The OmniPath network with extra activity flow, enzyme-substrate and ligand-receptor interactions</a></span></li><li><span><a href=\"#Transcriptional-regulation-network-from-DoRothEA-and-other-resources\" data-toc-modified-id=\"Transcriptional-regulation-network-from-DoRothEA-and-other-resources-2.3.3\"><span class=\"toc-item-num\">2.3.3&nbsp;&nbsp;</span>Transcriptional regulation network from DoRothEA and other resources</a></span></li><li><span><a href=\"#Literature-curated-miRNA-post-transcriptional-regulation-network\" data-toc-modified-id=\"Literature-curated-miRNA-post-transcriptional-regulation-network-2.3.4\"><span class=\"toc-item-num\">2.3.4&nbsp;&nbsp;</span>Literature curated miRNA post-transcriptional regulation network</a></span></li><li><span><a href=\"#Transcriptional-regulation-of-miRNA\" data-toc-modified-id=\"Transcriptional-regulation-of-miRNA-2.3.5\"><span class=\"toc-item-num\">2.3.5&nbsp;&nbsp;</span>Transcriptional regulation of miRNA</a></span></li><li><span><a href=\"#lncRNA-mRNA-interactions\" data-toc-modified-id=\"lncRNA-mRNA-interactions-2.3.6\"><span class=\"toc-item-num\">2.3.6&nbsp;&nbsp;</span>lncRNA-mRNA interactions</a></span></li><li><span><a href=\"#Small-molecule-protein-interactions\" data-toc-modified-id=\"Small-molecule-protein-interactions-2.3.7\"><span class=\"toc-item-num\">2.3.7&nbsp;&nbsp;</span>Small molecule-protein interactions</a></span></li></ul></li><li><span><a href=\"#Enzyme-substrate-relationships\" data-toc-modified-id=\"Enzyme-substrate-relationships-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;</span>Enzyme-substrate relationships</a></span></li><li><span><a href=\"#Protein-complexes\" data-toc-modified-id=\"Protein-complexes-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;</span>Protein complexes</a></span></li><li><span><a href=\"#Annotations\" data-toc-modified-id=\"Annotations-2.6\"><span class=\"toc-item-num\">2.6&nbsp;&nbsp;</span>Annotations</a></span></li><li><span><a href=\"#Inter-cellular-communication-roles\" data-toc-modified-id=\"Inter-cellular-communication-roles-2.7\"><span class=\"toc-item-num\">2.7&nbsp;&nbsp;</span>Inter-cellular communication roles</a></span></li></ul></li><li><span><a href=\"#Data-directly-from-the-original-resources\" data-toc-modified-id=\"Data-directly-from-the-original-resources-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Data directly from the original resources</a></span></li><li><span><a href=\"#Download-management\" data-toc-modified-id=\"Download-management-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>Download management</a></span><ul class=\"toc-item\"><li><span><a href=\"#Cache-management-and-customization\" data-toc-modified-id=\"Cache-management-and-customization-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;</span>Cache management and customization</a></span></li><li><span><a href=\"#Download-failures\" data-toc-modified-id=\"Download-failures-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;</span>Download failures</a></span><ul class=\"toc-item\"><li><span><a href=\"#Corrupted-cache-content\" data-toc-modified-id=\"Corrupted-cache-content-4.2.1\"><span class=\"toc-item-num\">4.2.1&nbsp;&nbsp;</span>Corrupted cache content</a></span></li><li><span><a href=\"#Network-communication-issues:-look-into-the-curl-debug-log\" data-toc-modified-id=\"Network-communication-issues:-look-into-the-curl-debug-log-4.2.2\"><span class=\"toc-item-num\">4.2.2&nbsp;&nbsp;</span>Network communication issues: look into the curl debug log</a></span></li><li><span><a href=\"#Timeouts\" data-toc-modified-id=\"Timeouts-4.2.3\"><span class=\"toc-item-num\">4.2.3&nbsp;&nbsp;</span>Timeouts</a></span></li><li><span><a href=\"#Access-and-inspect-the-Curl-object\" data-toc-modified-id=\"Access-and-inspect-the-Curl-object-4.2.4\"><span class=\"toc-item-num\">4.2.4&nbsp;&nbsp;</span>Access and inspect the <code>Curl</code> object</a></span></li><li><span><a href=\"#Is-it-failing-only-for-you?\" data-toc-modified-id=\"Is-it-failing-only-for-you?-4.2.5\"><span class=\"toc-item-num\">4.2.5&nbsp;&nbsp;</span>Is it failing only for you?</a></span></li><li><span><a href=\"#Read-the-log\" data-toc-modified-id=\"Read-the-log-4.2.6\"><span class=\"toc-item-num\">4.2.6&nbsp;&nbsp;</span>Read the log</a></span></li><li><span><a href=\"#TLS-(SSL,-HTTPS)-errors\" data-toc-modified-id=\"TLS-(SSL,-HTTPS)-errors-4.2.7\"><span class=\"toc-item-num\">4.2.7&nbsp;&nbsp;</span>TLS (SSL, HTTPS) errors</a></span></li></ul></li></ul></li><li><span><a href=\"#Resources\" data-toc-modified-id=\"Resources-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>Resources</a></span><ul class=\"toc-item\"><li><span><a href=\"#Licenses\" data-toc-modified-id=\"Licenses-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;</span>Licenses</a></span></li><li><span><a href=\"#Resource-information\" data-toc-modified-id=\"Resource-information-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;</span>Resource information</a></span></li><li><span><a href=\"#Resource-definitions-for-a-certain-database-or-dataset\" data-toc-modified-id=\"Resource-definitions-for-a-certain-database-or-dataset-5.3\"><span class=\"toc-item-num\">5.3&nbsp;&nbsp;</span>Resource definitions for a certain database or dataset</a></span></li></ul></li><li><span><a href=\"#Building-networks-\" data-toc-modified-id=\"Building-networks--6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;</span>Building networks <a class=\"anchor\" id=\"building-networks\" rel=\"nofollow\"></a></a></span><ul class=\"toc-item\"><li><span><a href=\"#Which-network-datasets-are-pre-defined-in-pypath?-\" data-toc-modified-id=\"Which-network-datasets-are-pre-defined-in-pypath?--6.1\"><span class=\"toc-item-num\">6.1&nbsp;&nbsp;</span>Which network datasets are pre-defined in pypath? <a class=\"anchor\" id=\"network-resources\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#The-Network-object\" data-toc-modified-id=\"The-Network-object-6.2\"><span class=\"toc-item-num\">6.2&nbsp;&nbsp;</span>The <code>Network</code> object</a></span></li><li><span><a href=\"#Network-in-pandas.DataFrame-\" data-toc-modified-id=\"Network-in-pandas.DataFrame--6.3\"><span class=\"toc-item-num\">6.3&nbsp;&nbsp;</span>Network in <em>pandas.DataFrame</em> <a class=\"anchor\" id=\"network-pandas\" rel=\"nofollow\"></a></a></span></li></ul></li><li><span><a href=\"#Translating-identifiers-\" data-toc-modified-id=\"Translating-identifiers--7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;</span>Translating identifiers <a class=\"anchor\" id=\"mapping\" rel=\"nofollow\"></a></a></span><ul class=\"toc-item\"><li><span><a href=\"#Pre-defined-ID-translation-tables\" data-toc-modified-id=\"Pre-defined-ID-translation-tables-7.1\"><span class=\"toc-item-num\">7.1&nbsp;&nbsp;</span>Pre-defined ID translation tables</a></span></li></ul></li><li><span><a href=\"#Homology-translation\" data-toc-modified-id=\"Homology-translation-8\"><span class=\"toc-item-num\">8&nbsp;&nbsp;</span>Homology translation</a></span><ul class=\"toc-item\"><li><span><a href=\"#Homology-translation-tables-as-dictionaries\" data-toc-modified-id=\"Homology-translation-tables-as-dictionaries-8.1\"><span class=\"toc-item-num\">8.1&nbsp;&nbsp;</span>Homology translation tables as dictionaries</a></span></li><li><span><a href=\"#Homology-translation-data-frames\" data-toc-modified-id=\"Homology-translation-data-frames-8.2\"><span class=\"toc-item-num\">8.2&nbsp;&nbsp;</span>Homology translation data frames</a></span></li></ul></li><li><span><a href=\"#Taxonomy\" data-toc-modified-id=\"Taxonomy-9\"><span class=\"toc-item-num\">9&nbsp;&nbsp;</span>Taxonomy</a></span><ul class=\"toc-item\"><li><span><a href=\"#Translating-to-NCBI-Taxonomy,-scientific-names-and-common-names\" data-toc-modified-id=\"Translating-to-NCBI-Taxonomy,-scientific-names-and-common-names-9.1\"><span class=\"toc-item-num\">9.1&nbsp;&nbsp;</span>Translating to NCBI Taxonomy, scientific names and common names</a></span></li><li><span><a href=\"#Organism-from-UniProt-ID\" data-toc-modified-id=\"Organism-from-UniProt-ID-9.2\"><span class=\"toc-item-num\">9.2&nbsp;&nbsp;</span>Organism from UniProt ID</a></span></li></ul></li><li><span><a href=\"#UniProt\" data-toc-modified-id=\"UniProt-10\"><span class=\"toc-item-num\">10&nbsp;&nbsp;</span>UniProt</a></span><ul class=\"toc-item\"><li><span><a href=\"#The-UniProt-input-module\" data-toc-modified-id=\"The-UniProt-input-module-10.1\"><span class=\"toc-item-num\">10.1&nbsp;&nbsp;</span>The UniProt input module</a></span><ul class=\"toc-item\"><li><span><a href=\"#All-UniProt-IDs-for-one-organism\" data-toc-modified-id=\"All-UniProt-IDs-for-one-organism-10.1.1\"><span class=\"toc-item-num\">10.1.1&nbsp;&nbsp;</span>All UniProt IDs for one organism</a></span></li><li><span><a href=\"#UniProt-ID-format-validation\" data-toc-modified-id=\"UniProt-ID-format-validation-10.1.2\"><span class=\"toc-item-num\">10.1.2&nbsp;&nbsp;</span>UniProt ID format validation</a></span></li><li><span><a href=\"#UniProt-ID-validation\" data-toc-modified-id=\"UniProt-ID-validation-10.1.3\"><span class=\"toc-item-num\">10.1.3&nbsp;&nbsp;</span>UniProt ID validation</a></span></li><li><span><a href=\"#Single-UniProt-protein-datasheet\" data-toc-modified-id=\"Single-UniProt-protein-datasheet-10.1.4\"><span class=\"toc-item-num\">10.1.4&nbsp;&nbsp;</span>Single UniProt protein datasheet</a></span></li><li><span><a href=\"#History-of-UniProt-records\" data-toc-modified-id=\"History-of-UniProt-records-10.1.5\"><span class=\"toc-item-num\">10.1.5&nbsp;&nbsp;</span>History of UniProt records</a></span></li><li><span><a href=\"#UniProt-legacy-API\" data-toc-modified-id=\"UniProt-legacy-API-10.1.6\"><span class=\"toc-item-num\">10.1.6&nbsp;&nbsp;</span>UniProt legacy API</a></span></li><li><span><a href=\"#Processed-UniProt-annotations\" data-toc-modified-id=\"Processed-UniProt-annotations-10.1.7\"><span class=\"toc-item-num\">10.1.7&nbsp;&nbsp;</span>Processed UniProt annotations</a></span></li></ul></li><li><span><a href=\"#The-UniProt-utils-module\" data-toc-modified-id=\"The-UniProt-utils-module-10.2\"><span class=\"toc-item-num\">10.2&nbsp;&nbsp;</span>The UniProt utils module</a></span><ul class=\"toc-item\"><li><span><a href=\"#Datasheets\" data-toc-modified-id=\"Datasheets-10.2.1\"><span class=\"toc-item-num\">10.2.1&nbsp;&nbsp;</span>Datasheets</a></span></li><li><span><a href=\"#Tables\" data-toc-modified-id=\"Tables-10.2.2\"><span class=\"toc-item-num\">10.2.2&nbsp;&nbsp;</span>Tables</a></span></li></ul></li><li><span><a href=\"#Sanitizing-UniProt-IDs\" data-toc-modified-id=\"Sanitizing-UniProt-IDs-10.3\"><span class=\"toc-item-num\">10.3&nbsp;&nbsp;</span>Sanitizing UniProt IDs</a></span></li></ul></li><li><span><a href=\"#Enzyme-substrate-interactions-\" data-toc-modified-id=\"Enzyme-substrate-interactions--11\"><span class=\"toc-item-num\">11&nbsp;&nbsp;</span>Enzyme-substrate interactions <a class=\"anchor\" id=\"enz-sub\" rel=\"nofollow\"></a></a></span><ul class=\"toc-item\"><li><span><a href=\"#Enzyme-substrate-objects\" data-toc-modified-id=\"Enzyme-substrate-objects-11.1\"><span class=\"toc-item-num\">11.1&nbsp;&nbsp;</span>Enzyme-substrate objects</a></span></li><li><span><a href=\"#Enzyme-substrate-data-frame\" data-toc-modified-id=\"Enzyme-substrate-data-frame-11.2\"><span class=\"toc-item-num\">11.2&nbsp;&nbsp;</span>Enzyme-substrate data frame</a></span></li></ul></li><li><span><a href=\"#Protein-sequences\" data-toc-modified-id=\"Protein-sequences-12\"><span class=\"toc-item-num\">12&nbsp;&nbsp;</span>Protein sequences</a></span></li><li><span><a href=\"#Annotations-\" data-toc-modified-id=\"Annotations--13\"><span class=\"toc-item-num\">13&nbsp;&nbsp;</span>Annotations <a class=\"anchor\" id=\"annotations\" rel=\"nofollow\"></a></a></span><ul class=\"toc-item\"><li><span><a href=\"#Load-a-single-annotation-resource\" data-toc-modified-id=\"Load-a-single-annotation-resource-13.1\"><span class=\"toc-item-num\">13.1&nbsp;&nbsp;</span>Load a single annotation resource</a></span></li><li><span><a href=\"#Load-the-full-annotations-database-by-the-database-manager\" data-toc-modified-id=\"Load-the-full-annotations-database-by-the-database-manager-13.2\"><span class=\"toc-item-num\">13.2&nbsp;&nbsp;</span>Load the full annotations database by the database manager</a></span></li><li><span><a href=\"#Load-only-selected-annotations\" data-toc-modified-id=\"Load-only-selected-annotations-13.3\"><span class=\"toc-item-num\">13.3&nbsp;&nbsp;</span>Load only selected annotations</a></span></li><li><span><a href=\"#Data-frames-of-annotations\" data-toc-modified-id=\"Data-frames-of-annotations-13.4\"><span class=\"toc-item-num\">13.4&nbsp;&nbsp;</span>Data frames of annotations</a></span></li></ul></li><li><span><a href=\"#Inter-cellular-signaling-roles-\" data-toc-modified-id=\"Inter-cellular-signaling-roles--14\"><span class=\"toc-item-num\">14&nbsp;&nbsp;</span>Inter-cellular signaling roles <a class=\"anchor\" id=\"intercell\" rel=\"nofollow\"></a></a></span><ul class=\"toc-item\"><li><span><a href=\"#Build-an-intercellular-communication-network\" data-toc-modified-id=\"Build-an-intercellular-communication-network-14.1\"><span class=\"toc-item-num\">14.1&nbsp;&nbsp;</span>Build an intercellular communication network</a></span></li><li><span><a href=\"#Quantitative-overview-of-intercell-annotations\" data-toc-modified-id=\"Quantitative-overview-of-intercell-annotations-14.2\"><span class=\"toc-item-num\">14.2&nbsp;&nbsp;</span>Quantitative overview of intercell annotations</a></span></li><li><span><a href=\"#Intercell-database-as-data-frame\" data-toc-modified-id=\"Intercell-database-as-data-frame-14.3\"><span class=\"toc-item-num\">14.3&nbsp;&nbsp;</span>Intercell database as data frame</a></span></li><li><span><a href=\"#Browse-intercell-categories\" data-toc-modified-id=\"Browse-intercell-categories-14.4\"><span class=\"toc-item-num\">14.4&nbsp;&nbsp;</span>Browse intercell categories</a></span></li></ul></li><li><span><a href=\"#Gene-Ontology-\" data-toc-modified-id=\"Gene-Ontology--15\"><span class=\"toc-item-num\">15&nbsp;&nbsp;</span>Gene Ontology <a class=\"anchor\" id=\"gene-ontology\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#Protein-complexes-\" data-toc-modified-id=\"Protein-complexes--16\"><span class=\"toc-item-num\">16&nbsp;&nbsp;</span>Protein complexes <a class=\"anchor\" id=\"complexes\" rel=\"nofollow\"></a></a></span><ul class=\"toc-item\"><li><span><a href=\"#Protein-complex-objects\" data-toc-modified-id=\"Protein-complex-objects-16.1\"><span class=\"toc-item-num\">16.1&nbsp;&nbsp;</span>Protein complex objects</a></span></li><li><span><a href=\"#Protein-complex-data-frame\" data-toc-modified-id=\"Protein-complex-data-frame-16.2\"><span class=\"toc-item-num\">16.2&nbsp;&nbsp;</span>Protein complex data frame</a></span></li></ul></li><li><span><a href=\"#Saving-datasets-as-pickles-\" data-toc-modified-id=\"Saving-datasets-as-pickles--17\"><span class=\"toc-item-num\">17&nbsp;&nbsp;</span>Saving datasets as pickles <a class=\"anchor\" id=\"pickle\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#Log-messages-and-sessions-\" data-toc-modified-id=\"Log-messages-and-sessions--18\"><span class=\"toc-item-num\">18&nbsp;&nbsp;</span>Log messages and sessions <a class=\"anchor\" id=\"log-session\" rel=\"nofollow\"></a></a></span><ul class=\"toc-item\"><li><span><a href=\"#Basic-info-about-the-session\" data-toc-modified-id=\"Basic-info-about-the-session-18.1\"><span class=\"toc-item-num\">18.1&nbsp;&nbsp;</span>Basic info about the session</a></span></li><li><span><a href=\"#Read-the-log-file\" data-toc-modified-id=\"Read-the-log-file-18.2\"><span class=\"toc-item-num\">18.2&nbsp;&nbsp;</span>Read the log file</a></span></li><li><span><a href=\"#Logging-to-the-console\" data-toc-modified-id=\"Logging-to-the-console-18.3\"><span class=\"toc-item-num\">18.3&nbsp;&nbsp;</span>Logging to the console</a></span></li><li><span><a href=\"#Disable-logging\" data-toc-modified-id=\"Disable-logging-18.4\"><span class=\"toc-item-num\">18.4&nbsp;&nbsp;</span>Disable logging</a></span></li><li><span><a href=\"#Write-to-the-log\" data-toc-modified-id=\"Write-to-the-log-18.5\"><span class=\"toc-item-num\">18.5&nbsp;&nbsp;</span>Write to the log</a></span><ul class=\"toc-item\"><li><span><a href=\"#Sending-a-single-message\" data-toc-modified-id=\"Sending-a-single-message-18.5.1\"><span class=\"toc-item-num\">18.5.1&nbsp;&nbsp;</span>Sending a single message</a></span></li><li><span><a href=\"#Connect-a-module-or-class-to-the-pypath-logger\" data-toc-modified-id=\"Connect-a-module-or-class-to-the-pypath-logger-18.5.2\"><span class=\"toc-item-num\">18.5.2&nbsp;&nbsp;</span>Connect a module or class to the pypath logger</a></span></li></ul></li></ul></li><li><span><a href=\"#BEL-export-\" data-toc-modified-id=\"BEL-export--19\"><span class=\"toc-item-num\">19&nbsp;&nbsp;</span>BEL export <a class=\"anchor\" id=\"bel\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#CellPhoneDB-export-\" data-toc-modified-id=\"CellPhoneDB-export--20\"><span class=\"toc-item-num\">20&nbsp;&nbsp;</span>CellPhoneDB export <a class=\"anchor\" id=\"cellphonedb\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#The-legacy-igraph-based-network-object-\" data-toc-modified-id=\"The-legacy-igraph-based-network-object--21\"><span class=\"toc-item-num\">21&nbsp;&nbsp;</span>The legacy <em>igraph</em>-based network object <a class=\"anchor\" id=\"legacy\" rel=\"nofollow\"></a></a></span><ul class=\"toc-item\"><li><span><a href=\"#I-just-want-a-network-quickly-and-play-around-with-pypath-\" data-toc-modified-id=\"I-just-want-a-network-quickly-and-play-around-with-pypath--21.1\"><span class=\"toc-item-num\">21.1&nbsp;&nbsp;</span>I just want a network quickly and play around with <em>pypath</em> <a class=\"anchor\" id=\"legacy-quick-start\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#How-do-I-build-networks-from-any-data-with-pypath?-\" data-toc-modified-id=\"How-do-I-build-networks-from-any-data-with-pypath?--21.2\"><span class=\"toc-item-num\">21.2&nbsp;&nbsp;</span>How do I build networks from any data with <em>pypath</em>? <a class=\"anchor\" id=\"legacy-quick-start-2\" rel=\"nofollow\"></a></a></span><ul class=\"toc-item\"><li><span><a href=\"#Defining-input-formats-\" data-toc-modified-id=\"Defining-input-formats--21.2.1\"><span class=\"toc-item-num\">21.2.1&nbsp;&nbsp;</span>Defining input formats <a class=\"anchor\" id=\"input-formats\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#Creating-PyPath-object-and-loading-the-2-test-files-\" data-toc-modified-id=\"Creating-PyPath-object-and-loading-the-2-test-files--21.2.2\"><span class=\"toc-item-num\">21.2.2&nbsp;&nbsp;</span>Creating PyPath object and loading the 2 test files <a class=\"anchor\" id=\"toy-example\" rel=\"nofollow\"></a></a></span></li></ul></li><li><span><a href=\"#Structure-of-the-legacy-network-object\" data-toc-modified-id=\"Structure-of-the-legacy-network-object-21.3\"><span class=\"toc-item-num\">21.3&nbsp;&nbsp;</span>Structure of the legacy network object</a></span><ul class=\"toc-item\"><li><span><a href=\"#Directions-and-signs-\" data-toc-modified-id=\"Directions-and-signs--21.3.1\"><span class=\"toc-item-num\">21.3.1&nbsp;&nbsp;</span>Directions and signs <a class=\"anchor\" id=\"directions\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#Accessing-nodes-in-the-network-\" data-toc-modified-id=\"Accessing-nodes-in-the-network--21.3.2\"><span class=\"toc-item-num\">21.3.2&nbsp;&nbsp;</span>Accessing nodes in the network <a class=\"anchor\" id=\"nodes\" rel=\"nofollow\"></a></a></span></li></ul></li><li><span><a href=\"#Querying-relationships-with-our-without-causality-\" data-toc-modified-id=\"Querying-relationships-with-our-without-causality--21.4\"><span class=\"toc-item-num\">21.4&nbsp;&nbsp;</span>Querying relationships with our without causality <a class=\"anchor\" id=\"causality\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#Accessing-edges-by-identifiers-\" data-toc-modified-id=\"Accessing-edges-by-identifiers--21.5\"><span class=\"toc-item-num\">21.5&nbsp;&nbsp;</span>Accessing edges by identifiers <a class=\"anchor\" id=\"edge-lookup\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#Literature-references-\" data-toc-modified-id=\"Literature-references--21.6\"><span class=\"toc-item-num\">21.6&nbsp;&nbsp;</span>Literature references <a class=\"anchor\" id=\"references\" rel=\"nofollow\"></a></a></span></li><li><span><a href=\"#Plotting-the-network-with-igraph-\" data-toc-modified-id=\"Plotting-the-network-with-igraph--21.7\"><span class=\"toc-item-num\">21.7&nbsp;&nbsp;</span>Plotting the network with <em>igraph</em> <a class=\"anchor\" id=\"plot\" rel=\"nofollow\"></a></a></span></li></ul></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OmniPath consists of 5 main database segments: network *(interactions)*, enzyme-substrate interactions *(enz_sub or ptms)*, protein complexes *(complexes)*, molecular entity annotations *(annotations)* and intercellular communication roles *(intercell)*. You can access all these by the web service at https://omnipathdb.org/ and the <a href=\"https://r.omnipathdb.org/\">R/Bioconductor package *OmnipathR*</a>, furthermore the network and some of the annotations by the <a href=\"http://apps.cytoscape.org/apps/omnipath\">Cytoscape app</a>. However only *pypath* is able to build these databases directly from the original sources with various options for customization and to provide a rich and versatile API for each database enjoying the almost unlimited flexibility of Python. This book attempts to be a guided tour around *pypath*, however almost all objects, modules, APIs presented here have many more methods, options and features than we have a chance to cover. If you feel like there might be something useful for you, don't hesitate to ask us by [github](https://github.com/saezlab/pypath/issues). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This document has been run with the following *pypath* version:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T14:11:06.071713Z",
     "start_time": "2022-12-03T14:11:06.016142Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.14.32'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pypath\n",
    "pypath.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build, load and save databases"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We provide a high level interface in the module *pypath.omnipath.app*. This is the easiest way to build, manage and access the OmniPath databases, hence this is what we present in the *Quick start* section. In further sections we show the lower level modules more in detail."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The OmniPath app"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*pypath.omnipath* is an application which contains a database manager at *omnipath.db*. This manager is empty by default. It builds and loads the databases on demand. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T14:11:27.592956Z",
     "start_time": "2022-12-03T14:11:26.254734Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pypath.omnipath.app.DatabaseManager at 0x602fb851cd90>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "\n",
    "omnipath.db"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Built-in database definitions\n",
    "\n",
    "The databases presented below are [pre-defined in pypath](https://github.com/saezlab/pypath/blob/master/pypath/omnipath/databases/builtins.json). You can also list them by:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T14:11:32.347480Z",
     "start_time": "2022-12-03T14:11:32.343892Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['omnipath',\n",
       " 'curated',\n",
       " 'complex',\n",
       " 'annotations',\n",
       " 'intercell',\n",
       " 'tf_target',\n",
       " 'dorothea',\n",
       " 'small_molecule',\n",
       " 'tf_mirna',\n",
       " 'mirna_mrna',\n",
       " 'lncrna_mrna',\n",
       " 'enz_sub']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "omnipath.db.datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Networks\n",
    "<a id=\"nw-dbmanager\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OmniPath offers multiple built in network datasets: the OmniPath PPI network the more strict literature curated PPI network, the special ligand-receptor PPI network and various other PPI datasets, the transcriptional regulation network from DoRothEA and other resources, miRNA post-transcriptional regulation network and also transcriptional regulation network for miRNAs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Strictly literature curated network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:17:13.442238Z",
     "start_time": "2022-12-02T13:16:56.607485Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 7980 nodes, 35551 interactions>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "cu = omnipath.db.get_db('curated')\n",
    "cu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The OmniPath network with extra activity flow, enzyme-substrate and ligand-receptor interactions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:18:55.433036Z",
     "start_time": "2022-12-02T13:17:55.113111Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 18558 nodes, 94358 interactions>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "op = omnipath.db.get_db('omnipath')\n",
    "op"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Transcriptional regulation network from DoRothEA and other resources"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: according to the default settings, DoRothEA confidence levels A-D and all original resources will be loaded. To load only DoRothEA, use the key `\"dorothea\"` instead of `\"tf_target\"`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:21:54.401697Z",
     "start_time": "2022-12-02T13:19:41.686583Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 18986 nodes, 326708 interactions>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "tft = omnipath.db.get_db('tf_target')\n",
    "tft"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Literature curated miRNA post-transcriptional regulation network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:31:55.086766Z",
     "start_time": "2022-12-02T13:31:52.810485Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 1264 nodes, 3288 interactions>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "mi = omnipath.db.get_db('mirna_mrna')\n",
    "mi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Transcriptional regulation of miRNA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:32:41.408391Z",
     "start_time": "2022-12-02T13:32:41.403314Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 1032 nodes, 4960 interactions>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "tmi = omnipath.db.get_db('tf_mirna')\n",
    "tmi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### lncRNA-mRNA interactions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:33:03.630975Z",
     "start_time": "2022-12-02T13:33:03.627353Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 243 nodes, 217 interactions>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "lnc = omnipath.db.get_db('lncrna_mrna')\n",
    "lnc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Small molecule-protein interactions\n",
    "\n",
    "These interactions are either ligand-receptor connections, enzyme inhibitions, allosteric regulations or enzyme-metabolite interactions. Currently it is a small, experimental dataset, but will be largely extended in the future."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:57:17.189127Z",
     "start_time": "2022-12-02T13:57:09.252382Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 1980 nodes, 3147 interactions>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "smol = omnipath.db.get_db('small_molecule')\n",
    "smol"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enzyme-substrate relationships\n",
    "<a id=\"es-dbmanager\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:33:26.176882Z",
     "start_time": "2022-12-02T13:33:20.037879Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Enzyme-substrate database: 41426 relationships>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "es = omnipath.db.get_db('enz_sub')\n",
    "es"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Protein complexes\n",
    "<a id=\"co-dbmanager\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:33:31.101976Z",
     "start_time": "2022-12-02T13:33:30.950463Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Complex database: 28173 complexes>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "co = omnipath.db.get_db('complex')\n",
    "co"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Annotations\n",
    "\n",
    "<a id=\"an-dbmanager\"></a>\n",
    "The annotations database is huge, building or even loading it takes long time and requires quite some memory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:36:28.124454Z",
     "start_time": "2022-12-02T13:33:44.524615Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Annotation database: 5490653 records about 50872 entities from 68 resources>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "an = omnipath.db.get_db('annotations')\n",
    "an"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inter-cellular communication roles\n",
    "\n",
    "<a id=\"ic-dbmanager\"></a>\n",
    "This database is quick to build, but it requires the *annotations* database, which is really heavy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:37:12.358451Z",
     "start_time": "2022-12-02T13:36:49.019034Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Intercell annotations: 301527 records about 48570 entities>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "ic = omnipath.db.get_db('intercell')\n",
    "ic"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data directly from the original resources\n",
    "\n",
    "The `pypath.inputs` module contains clients for more than 150 molecular biology and biomedical resources, and overall almost 500 functions that download data directly from these resources. Maintaining such a large number of clients is troublesome, hence at any time some of them are broken, you can check them in our [daily status report](https://status.omnipathdb.org/). Each submodule of `pypath.inputs` is named after its corresponding resource, all lowercase, e.g. \"depod\" *(DEPOD)* or \"cytosig\" *(CytoSig)*. Within these modules each function name starts with the name of the resource, and ends with the kind of data it retrieves. For example, `pypath.inputs.signor.signor_interactions` downloads interactions from *SIGNOR.* The labels *\"_interactions\"*, *\"_enz_sub\"*, *\"_complexes\"* and *\"_annotations\"* retrieve records intended to these respective databases. However, the records at this stage are not fully processed yet. Some functions have different postfixes, e.g. *\"_raw\"* means the data is close to the format provided by the resource itself; *\"_mapping\"* means it is intended for a translation table. The purpose of the input functions is to 1) handle the download; 2) read the raw data; 3) extract the relevant parts; 4) do the specific part of processing, i.e. bring the data to a state when it is suitable for the generic database classes for further processing. The outputs of these functions is not standard in any ways, though you may observ repeated patterns. The input functions typically return lists or dictionaries. These are arbitrarily designed towards the aims of selecting the relevant fields and give straightforward, accessible Python data structures for processing within or outside of *pypath*. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use SIGNOR as an example because this resource provides data for almost all OmniPath databases. The `signor_complexes` function returns a set of `pypath.internals.intera.Complex` objects, ready to be added to the OmniPath complexes database (built by `pypath.core.complex.ComplexAggregator`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:24:43.157542Z",
     "start_time": "2022-12-03T15:24:43.144593Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'COMPLEX:P23511_P25208_Q13952': Complex NFY: COMPLEX:P23511_P25208_Q13952,\n",
       " 'COMPLEX:P68104_P85299_Q6R327_Q8TB45_Q9BVC4': Complex mTORC2: COMPLEX:P68104_P85299_Q6R327_Q8TB45_Q9BVC4,\n",
       " 'COMPLEX:P42345_Q8N122_Q8TB45_Q96B36_Q9BVC4': Complex mTORC1: COMPLEX:P42345_Q8N122_Q8TB45_Q96B36_Q9BVC4,\n",
       " 'COMPLEX:P63208_Q13616_Q9Y297': Complex SCF-betaTRCP: COMPLEX:P63208_Q13616_Q9Y297,\n",
       " 'COMPLEX:Q09472_Q92793': Complex CBP/p300: COMPLEX:Q09472_Q92793,\n",
       " 'COMPLEX:Q09472_Q92793_Q92831': Complex P300/PCAF: COMPLEX:Q09472_Q92793_Q92831,\n",
       " 'COMPLEX:Q13485_Q15796': Complex SMAD2/SMAD4: COMPLEX:Q13485_Q15796,\n",
       " 'COMPLEX:P84022_Q13485': Complex SMAD3/SMAD4: COMPLEX:P84022_Q13485,\n",
       " 'COMPLEX:P05412_Q13485': Complex SMAD4/JUN: COMPLEX:P05412_Q13485,\n",
       " 'COMPLEX:Q15796_Q9HAU4': Complex SMAD2/SMURF2: COMPLEX:Q15796_Q9HAU4,\n",
       " 'COMPLEX:O15105_Q01094_Q13547': Complex SMAD7/HDAC1/E2F-1: COMPLEX:O15105_Q01094_Q13547,\n",
       " 'COMPLEX:P19838_Q04206': Complex NfKb-p65/p50: COMPLEX:P19838_Q04206,\n",
       " 'COMPLEX:O14920_O15111': Complex IK"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 17699 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pypath.inputs import signor\n",
    "signor.signor_complexes()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `signor_interactions` function returns a list of arbitrary tuples that represent the most important properties of SIGNOR interaction records in a human readable way, and ready to be processed by the `pypath.core.network.Network` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T14:11:52.195363Z",
     "start_time": "2022-12-03T14:11:51.895162Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[SignorInteraction(source='O15530', target='O15530', source_isoform=None, target_isoform=None, source_type='protein', target_type='protein', effect='unknown', mechanism='phosphorylation', ncbi_tax_id='9606', pubmeds='10455013', direct=True, ptm_type='phosphorylation', ptm_residue='Ser396', ptm_motif='SSSSSSHsLSASDTG'),\n",
       " SignorInteraction(source='Q9NQ66', target='CHEBI:18035', source_isoform=None, target_isoform=None, source_type='protein', target_type='smallmolecule', effect='up-regulates quantity', mechanism='', ncbi_tax_id='-1', pubmeds='23880553', direct=True, ptm_type='', ptm_residue='Small molecule catalysis', ptm_motif=''),\n",
       " SignorInteraction(source='P62136', target='O15169', source_isoform=None, target_isoform=None, source_type='protein', target_type='protein', effect='down-regulates activity', mechanism='dephosphorylation', ncbi_tax_id='9606', pubmeds='17318175', direct=True, ptm_type='dephosphorylation', ptm_residue='Ser77', ptm_motif='YEPEGSAsPTPPYLK'),\n",
       " SignorInteraction(sou"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 3285 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "signor.signor_interactions()[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note, the records above contain also enzyme-PTM data, hence the `signor.signor_enzyme_substrate` function only converts them to an intermediate format to make it easier to process for `pypath.core.enz_sub.EnzymeSubstrateAggregator`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:58:20.642926Z",
     "start_time": "2022-12-02T13:58:20.324789Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'typ': 'phosphorylation',\n",
       "  'resnum': 396,\n",
       "  'instance': 'SSSSSSHSLSASDTG',\n",
       "  'substrate': 'O15530',\n",
       "  'start': 389,\n",
       "  'end': 403,\n",
       "  'kinase': 'O15530',\n",
       "  'resaa': 'S',\n",
       "  'motif': 'SSSSSSHSLSASDTG',\n",
       "  'enzyme_isoform': None,\n",
       "  'substrate_isoform': None,\n",
       "  'references': {'10455013'}},\n",
       " {'typ': 'dephosphorylation',\n",
       "  'resnum': 77,\n",
       "  'instance': 'YEPEGSASPTPPYLK',\n",
       "  'substrate': 'O15169',\n",
       "  'start': 70,\n",
       "  'end': 84,\n",
       "  'kinase': 'P62136',\n",
       "  'resaa': 'S',\n",
       "  'motif': 'YEPEGSASPTPPYLK',\n",
       "  'enzyme_isoform': None,\n",
       "  'substrate_isoform': None,\n",
       "  'references': {'17318175'}}]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signor.signor_enzyme_substrate()[:2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, SIGNOR also assigns proteins to pathways. This information is intended for the OmniPath annotations database, and retrieved by the `signor.signor_pathway_annotations` function. This function returns a dict of sets which is typical for *_annotation* functions. This format requires practically no further processing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:58:28.574530Z",
     "start_time": "2022-12-02T13:58:27.092583Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{SignorPathway(pathway='TNF alpha'),\n",
       " SignorPathway(pathway='Toll like receptors')}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signor.signor_pathway_annotations()['O14733']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We haven't mention all functions in the `inputs.signor` module. The rest of the functions retrieve additional information needed by the four functions above, and are of limited direct use for users. For example, `signor_protein_families` returns a dict with the internal ID and members of protein families; this data is used to process the interactions and complexes, but not too interesting on its own."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:58:53.069909Z",
     "start_time": "2022-12-02T13:58:53.064319Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Q9HBW0', 'Q92633', 'Q9UBY5']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signor.signor_protein_families()['SIGNOR-PF2']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Download management\n",
    "\n",
    "### Cache management and customization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `pypath.omnipath.app` saves the databases to pickle dumps by default under the `~/.pypath/pickles/` directory and after the first build loads them from there. The very first build of each database might take quite long time (up to >90 min in case of the OmniPath network or annotations) because of the large number of downloads. Subsequent builds will be much faster because `pypath` stores all the downloaded data in a local cache and downloads again only upon request from the user. Loading the databases from pickle dumps takes only seconds. However if you want to build with different settings you should be aware to set up a different cache file name."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Download failures\n",
    "\n",
    "Issuing hundreds of requests to dozens of servers sooner or later comes with failures. These might happen just by accident, especially on slow networks, it is always recommended to try again. The \n",
    "\n",
    "#### Corrupted cache content\n",
    "\n",
    "Sometimes a truncated or corrupted file remains in the cache, in this case you can use the context managers in ``pypath.share.curl`` to control the cache. E.g. if the download of the *DEPOD* database failed and keeps failing due to a corrupted file, use the ``cache_delete_on`` context:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:59:07.927339Z",
     "start_time": "2022-12-02T13:59:02.319604Z"
    }
   },
   "outputs": [],
   "source": [
    "from pypath.share import curl\n",
    "from pypath.inputs import depod\n",
    "\n",
    "with curl.cache_delete_on():\n",
    "    depod = depod.depod_enzyme_substrate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ``cache_off`` context forces download even if a cache item is available; the ``cache_print_on`` context prints paths to the accessed cache files to the terminal, though the paths can always be found in the log; the ``dry_run_on`` context sets up the ``pypath.share.curl.Curl`` object and stops just before the actual download.\n",
    "\n",
    "#### Network communication issues: look into the curl debug log\n",
    "\n",
    "Downloads might fail also due to TLS or HTTP errors, wrong headers or parameters, and many other reasons. In this case a full debug output from `curl` might be very useful. The ``debug_on`` context writes curl debug into the logfile:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:59:12.632324Z",
     "start_time": "2022-12-02T13:59:12.592543Z"
    }
   },
   "outputs": [],
   "source": [
    "from pypath.share import curl\n",
    "from pypath.inputs import depod\n",
    "\n",
    "with curl.debug_on():\n",
    "    depod = depod.depod_enzyme_substrate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Timeouts\n",
    "\n",
    "From the log we can find out if the download fails due to a timeout. In this case, the timeout parameters can be altered by a settings context. Apart from a timeout for the completion of the download, there is ``curl_connect_timeout`` (timeout for establishing connection to the server), and ``curl_extended_timeout``, that is used for servers that are known to be exceptionally slow. Another parameter, ``curl_retries`` is the number of attempts before giving up. By default it's 3, and that should be more than enough."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:59:17.428379Z",
     "start_time": "2022-12-02T13:59:17.392291Z"
    }
   },
   "outputs": [],
   "source": [
    "from pypath.share import settings\n",
    "from pypath.inputs import depod\n",
    "\n",
    "with settings.context(curl_timeout = 360):\n",
    "    depod = depod.depod_enzyme_substrate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Access and inspect the ``Curl`` object\n",
    "\n",
    "Often the ``Curl`` object is created in a function from the ``pypath.inputs`` module, deep in a call stack, hence accessing it for investigation is difficult. Using the ``preserve_on`` context, the last ``Curl`` instance is kept under the ``pypath.share.curl.LASTCURL`` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:59:24.683382Z",
     "start_time": "2022-12-02T13:59:24.640968Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pypath.share.curl.Curl at 0x6947386dc8b0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.share import curl\n",
    "from pypath.inputs import depod\n",
    "\n",
    "with curl.preserve_on():\n",
    "    depod = depod.depod_enzyme_substrate()\n",
    "\n",
    "depod_curl = curl.LASTCURL\n",
    "depod_curl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:59:28.805129Z",
     "start_time": "2022-12-02T13:59:28.798642Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('http://depod.bioss.uni-freiburg.de/download/DEPOD_201405_human_phosphatase-substrate.mitab',\n",
       " [],\n",
       " <_io.TextIOWrapper name='/home/denes/.pypath/cache/6a711369ecf9dcff8c5ed88996685b54-DEPOD_201405_human_phosphatase-substrate.mitab' mode='r' encoding='iso-8859-1'>,\n",
       " 0)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "depod_curl.url, depod_curl.req_headers, depod_curl.fileobj, depod_curl.status"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Is it failing only for you?\n",
    "\n",
    "Okay, this is the one you should check first: we run almost all downloads in ``pypath`` daily, you can always check [in the report](https://status.omnipathdb.org/) wether a particular function run successfully last night on our server. If it fails also in our daily build, it still can be a transient error that disappears within a few days, or it can be a permanent error. In the latter case, we first try to fix the issue in pypath (maybe the behaviour or the address of the third party server has changed). If we have no way to fix it, we start [hosting the data on our own server](https://rescued.omnipathdb.org/) and make pypath download it from there."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Read the log\n",
    "\n",
    "Above we mentioned a lot the pypath log. Here is how to access the log, see more details in the section about logging:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:59:34.574666Z",
     "start_time": "2022-12-02T13:59:34.563630Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2022-12-02 14:57:09] Welcome!\n",
      "[2022-12-02 14:57:09] Logger started, logging into `/home/denes/pypath/notebooks/pypath_log/pypath-s3e92.log`.\n",
      "[2022-12-02 14:57:09] Session `s3e92` started.\n",
      "[2022-12-02 14:57:09] [pypath] \n",
      "\t- session ID: `s3e92`\n",
      "\t- working directory: `/home/denes/pypath/notebooks`\n",
      "\t- logfile: `/home/denes/pypath/notebooks/pypath_log/pypath-s3e92.log`\n",
      "\t- pypath version: 0.14.30\n",
      "[2022-12-02 14:57:09] [curl] Creating Curl object to retrieve data from `https://www.ensembl.org/info/about/species.html`\n",
      "[2022-12-02 14:57:09] [curl] Cache file path: `/home/denes/.pypath/cache/535b06d53a59e75bb693369bc5fdc556-species.html`\n",
      "[2022-12-02 14:57:09] [curl] Cache file found, no need for download.\n",
      "[2022-12-02 14:57:09] [curl] Opening plain text file `/home/denes/.pypath/cache/535b06d53a59e75bb693369bc5fdc556-species.html`.\n",
      "[2022-12-02 14:57:09] [curl] Contents of `/home/denes/.pypath/cache/535b06d53a59e75bb693369bc5fdc556-species.html` has been read and the file has been closed.\n",
      "[2022-1"
     ]
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 112963 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pypath\n",
    "pypath.log()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TLS (SSL, HTTPS) errors\n",
    "\n",
    "Failed to verify certificate, invalid, expired, self-signed, missing certificates. These might be the most common reasons why people open issues for our software. TLS is a method for encrypted, typically HTTP, communication. The server has a certificate and uses it to sign and encrypt the data before sending it to the client. The client trusts the server certificate because it is signed by another certificate. And that is signed by another one, and so on, until we reach a so called root certificate that is known and trusted by the client. The number of root certificates used globally is so small that every single computer stores them locally and updates them time to time from trusted sources, such as the provider of the operating system, web browser or programming language. Having up-to-date certificate store and correctly configured TLS clients on your computer is your (or your system admin's) duty, we can here only give a generic procedure to address these issues. In 97% of the cases the issue is in your computer, but sometimes the server might be responsible. If you experience a TLS issue:\n",
    "\n",
    "- Check the status of the server: initiate a scan at a free TLS checking service, such as [SSL Labs](https://www.ssllabs.com/ssltest/): look for any issue with the certificate chain, such as missing or expired certificates, old or too new ciphers not supported by your client, etc.\n",
    "- Identify the server that your client failed to establish a TLS connection to (in case of `pypath`, look into the log)\n",
    "- Identify your software that contains the TLS client: in case of `pypath`, it uses `pycurl`, a Python module built on `libcurl`\n",
    "- Identify the provider of the client software: it can be PyPI, Anaconda, your operating system, etc.\n",
    "- Find out which certificate store that software uses: most of them uses the store from your operating system, but for example Java or Mozilla Firefox come with their own certificates\n",
    "- Check if the certificate store is up-to-date, update if necessary\n",
    "- Alternatively, identify the missing root certificate and add it manually to the store; you can also add a non-root certificate if the server has a serious issue and the chain can not be followed until a valid root certificate\n",
    "\n",
    "Please open TLS related issues for our software only if you\n",
    "\n",
    "- Experience a server side issue with omnipathdb.org\n",
    "- You have a strong reason to think the reason is in the code written by us or can be easily fixed within our code"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Resources"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T14:27:45.625762Z",
     "start_time": "2022-12-03T14:27:45.604872Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pypath.resources.controller.ResourceController at 0x6cc25e25dcf0>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import resources\n",
    "rc = resources.get_controller()\n",
    "rc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Licenses\n",
    "\n",
    "The license of SIGNOR is CC BY-SA, it allows commercial (for-profit) use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T14:27:47.473191Z",
     "start_time": "2022-12-03T14:27:47.467813Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<License CC BY-SA 4.0>, True)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rc.license('SIGNOR'), rc.license('SIGNOR').commercial"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Resource information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T14:27:49.651220Z",
     "start_time": "2022-12-03T14:27:49.639678Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'yearUsedRelease': 2015,\n",
       " 'releases': [2009, 2011, 2015],\n",
       " 'urls': {'articles': ['http://bioinformatics.oxfordjournals.org/content/25/5/690.long',\n",
       "   'http://nar.oxfordjournals.org/content/43/D1/D321.long',\n",
       "   'http://nar.oxfordjournals.org/content/39/suppl_1/D235.long'],\n",
       "  'webpages': ['http://matrixdb.univ-lyon1.fr/'],\n",
       "  'omictools': ['http://omictools.com/matrixdb-tool']},\n",
       " 'pubmeds': [19147664, 20852260, 25378329],\n",
       " 'taxons': ['mammalia'],\n",
       " 'annot': ['experiment'],\n",
       " 'recommend': ['small, literature curated interaction resource; many interactions for',\n",
       "  'receptors and extracellular proteins'],\n",
       " 'descriptions': ['Protein data were imported from the UniProtKB/Swiss-Prot database (Bairoch et',\n",
       "  'al., 2005) and identified by UniProtKB/SwissProt accession numbers. In order to',\n",
       "  'list all the partners of a protein, interactions are associated by default to the',\n",
       "  'accession number of the human protein. The actual source species used in experiments is',\n",
       "  'indicated in the page repor"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 4479 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rc['MatrixDB']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Resource definitions for a certain database or dataset\n",
    "\n",
    "<div class=\"alert alert-block alert-success\"><b>Note:</b> This does not work yet for all databases and datasets, but likely in the near future this will be the preferred method to access resource definitions.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T20:08:29.219348Z",
     "start_time": "2022-12-02T20:08:29.213904Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<EnzymeSubstrateResource: phosphoELM>,\n",
       " <EnzymeSubstrateResource: dbPTM>,\n",
       " <EnzymeSubstrateResource: SIGNOR>,\n",
       " <EnzymeSubstrateResource: HPRD>,\n",
       " <EnzymeSubstrateResource: Li2012>,\n",
       " <EnzymeSubstrateResource: DEPOD>,\n",
       " <EnzymeSubstrateResource: PhosphoSite>,\n",
       " <EnzymeSubstrateResource: PhosphoNetworks>,\n",
       " <EnzymeSubstrateResource: MIMP>,\n",
       " <EnzymeSubstrateResource: ProtMapper>,\n",
       " <EnzymeSubstrateResource: KEA>]"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rc.collect_enzyme_substrate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The resource definitions carry all information necessary to load the resource, for example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T20:09:51.277700Z",
     "start_time": "2022-12-02T20:09:51.271494Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('phosphoelm.phosphoelm_enzyme_substrate', 'uniprot')"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phosphoelm = rc.collect_enzyme_substrate()[0]\n",
    "phosphoelm.input_method, phosphoelm.id_type_enzyme"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Building networks <a class=\"anchor\" id=\"building-networks\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this you will need the `Network` class from the `pypath.core.network` module which takes care about building and querying the network. Also you need the `pypath.resources.network` module where you find a number of predefined input settings organized in larger categories (e.g. activity flow, enzyme-substrate, transcriptional regulation, etc). These input settings will tell `pypath` how to download and process the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:59:49.395955Z",
     "start_time": "2022-12-02T13:59:49.392650Z"
    }
   },
   "outputs": [],
   "source": [
    "from pypath.core import network\n",
    "from pypath.resources import network as netres"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example the `netres.pathway` is a collection of databases which fit into the activity flow concept, i.e. one protein either stimulates or inhibits the other. It is a dictionary with names as keys and the input settings as values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T13:59:52.071557Z",
     "start_time": "2022-12-02T13:59:52.066832Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'trip': <NetworkResource: TRIP (post_translational, activity_flow)>,\n",
       " 'spike': <NetworkResource: SPIKE (post_translational, activity_flow)>,\n",
       " 'signalink3': <NetworkResource: SignaLink3 (post_translational, activity_flow)>,\n",
       " 'guide2pharma': <NetworkResource: Guide2Pharma (post_translational, activity_flow)>,\n",
       " 'ca1': <NetworkResource: CA1 (post_translational, activity_flow)>,\n",
       " 'arn': <NetworkResource: ARN (post_translational, activity_flow)>,\n",
       " 'nrf2': <NetworkResource: NRF2ome (post_translational, activity_flow)>,\n",
       " 'macrophage': <NetworkResource: Macrophage (post_translational, activity_flow)>,\n",
       " 'death': <NetworkResource: DeathDomain (post_translational, activity_flow)>,\n",
       " 'pdz': <NetworkResource: PDZBase (post_translational, activity_flow)>,\n",
       " 'signor': <NetworkResource: SIGNOR (post_translational, activity_flow)>,\n",
       " 'adhesome': <NetworkResource: Adhesome (post_translational, activity_flow)>,\n",
       " 'icellnet': <NetworkResource: ICELLNET (post_translational, activity_flow)>,\n",
       " 'celltalkdb': <Net"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 1864 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "netres.pathway"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Such a dictionary you can pass to the `load` method of the `network.Network` object. Then it will download the data from the original sources, translate the identifiers and merge the networks. Pypath stores all downloaded data in a cache, by default `~/.pypath/cache` in your user's home directory. For this reason when you load a resource for the first time it might take long but next time will be faster as data will be fetched from the cache. First create a `pypath.network.Network` object, then build the network:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:00:36.477296Z",
     "start_time": "2022-12-02T14:00:03.572789Z"
    }
   },
   "outputs": [],
   "source": [
    "n = network.Network()\n",
    "n.load(netres.pathway)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:02:23.812998Z",
     "start_time": "2022-12-02T14:02:23.808181Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 6833 nodes, 25607 interactions>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can add more resource sets a similar way:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:04:29.020210Z",
     "start_time": "2022-12-02T14:03:58.982627Z"
    }
   },
   "outputs": [],
   "source": [
    "n.load(netres.enzyme_substrate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:05:38.101342Z",
     "start_time": "2022-12-02T14:05:38.096034Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 7979 nodes, 35550 interactions>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To load one single resource simply pass the `NetworkResource` directly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:05:42.298282Z",
     "start_time": "2022-12-02T14:05:42.128508Z"
    }
   },
   "outputs": [],
   "source": [
    "n.load(netres.interaction['matrixdb'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:05:44.218838Z",
     "start_time": "2022-12-02T14:05:44.215190Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 8002 nodes, 35748 interactions>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Which network datasets are pre-defined in pypath? <a class=\"anchor\" id=\"network-resources\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can find all the pre-defined datasets in the ``pypath.resources.network`` module. This module currently is a wrapper around an older module, ``pypath.resources.data_formats``, the actual definitions are written in this latter. As already we mentined above, the `pathway` dataset contains the literature curated activity flow resources. This was the original focus of pypath and OmniPath, however since then we added a great variety of other kinds of resource definitions. Here we give an overview of these."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* `pypath.resources.network.pathway`: activity flow networks with literature references\n",
    "* `pypath.resources.network.activity_flow`: synonym for `pathway`\n",
    "* `pypath.resources.network.pathway_noref`: activity flow networks without literature references\n",
    "* `pypath.resources.network.pathway_all`: all activity flow data\n",
    "* `pypath.resources.network.ptm`: enzyme-substrate interaction networks with literature references\n",
    "* `pypath.resources.network.enzyme_substrate`: synonym for `ptm`\n",
    "* `pypath.resources.network.ptm_noref`: enzyme-substrate networks without literature references\n",
    "* `pypath.resources.network.ptm_all`: all enzyme-substrate data\n",
    "* `pypath.resources.network.interaction`: undirected interactions from both literature curated and high-throughput collections (e.g. IntAct, BioGRID)\n",
    "* `pypath.resources.network.interaction_misc`: undirected, high-scale interaction networks without the constraint of having any literature reference (e.g. the unbiased human interactome screen from the Vidal lab)\n",
    "* `pypath.resources.network.transcription_onebyone`: transcriptional regulation databases (TF-target interactions) with all databases downloaded directly and processed by `pypath`\n",
    "* `pypath.resources.network.transcription`: transcriptional regulation only from the DoRothEA data\n",
    "* `pypath.resources.network.mirna_target`: miRNA-mRNA interactions from literature curated resources\n",
    "* `pypath.resources.network.tf_mirna`: transcriptional regulation of miRNA from literature curated resources\n",
    "* `pypath.resources.network.lncrna_protein`: lncRNA-protein interactions from literature curated datasets\n",
    "* `pypath.resources.network.ligand_receptor`: ligand-receptor interactions from both literature curated and other kinds of resources\n",
    "* `pypath.resources.network.pathwaycommons`: the PathwayCommons database\n",
    "* `pypath.resources.network.reaction`: process description databases; not guaranteed to work at this moment\n",
    "* `pypath.resources.network.reaction_misc`: alternative definitions to load process description databases; not guaranteed to work at this moment\n",
    "* `pypath.resources.network.small_molecule_protein`: signaling interactions between small molecules and proteins"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see the list of the resources in a dataset, you can check the dict keys or the `name` attribute of each element:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:05:57.168867Z",
     "start_time": "2022-12-02T14:05:57.160847Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['trip', 'spike', 'signalink3', 'guide2pharma', 'ca1', 'arn', 'nrf2', 'macrophage', 'death', 'pdz', 'signor', 'adhesome', 'icellnet', 'celltalkdb', 'cellchatdb', 'connectomedb', 'talklr', 'cellinker', 'scconnect', 'hpmr', 'cellphonedb', 'ramilowski2015', 'lrdb', 'baccin2019'])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "netres.pathway.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:00.992851Z",
     "start_time": "2022-12-02T14:06:00.982125Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['TRIP',\n",
       " 'SPIKE',\n",
       " 'SignaLink3',\n",
       " 'Guide2Pharma',\n",
       " 'CA1',\n",
       " 'ARN',\n",
       " 'NRF2ome',\n",
       " 'Macrophage',\n",
       " 'DeathDomain',\n",
       " 'PDZBase',\n",
       " 'SIGNOR',\n",
       " 'Adhesome',\n",
       " 'ICELLNET',\n",
       " 'CellTalkDB',\n",
       " 'CellChatDB',\n",
       " 'connectomeDB2020',\n",
       " 'talklr',\n",
       " 'Cellinker',\n",
       " 'scConnect',\n",
       " 'HPMR',\n",
       " 'CellPhoneDB',\n",
       " 'Ramilowski2015',\n",
       " 'LRdb',\n",
       " 'Baccin2019']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[resource.name for resource in netres.pathway.values()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The resource definitions above carry all the information about how to load the resource: which function to call, how to process the identifiers, references, directions, and all other attributes from the input. E.g. which column from SPIKE corresponds to the source node? Which identifier type is used? It is the second column, and it has gene symbols in it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:07.285628Z",
     "start_time": "2022-12-02T14:06:07.277820Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 'genesymbol')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "netres.pathway['spike'].networkinput.id_col_a, netres.pathway['spike'].networkinput.id_type_a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The `Network` object"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once you built a network you can use it for various purposes and write your own scripts for further processing or analysis. Below we create a `Network` object and populate it with the `pathway` dataset.\n",
    "\n",
    "<div class=\"alert alert-block alert-warning\"><b>Warning:</b> it is recommended to access databases <a href=\"#nw-dbmanager\">by the manager</a>. Running the code below takes really long and does not save or reload the database, it builds a fresh copy each time.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:15:48.138806Z",
     "start_time": "2022-12-02T14:15:12.068028Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Network: 6833 nodes, 25607 interactions>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.core import network\n",
    "from pypath.resources import network as netres\n",
    "\n",
    "n = network.Network()\n",
    "n.load(netres.pathway)\n",
    "n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Almost all data is stored as a dict node pairs vs. interactions in `Network.interactions`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:02.706809Z",
     "start_time": "2022-12-02T14:17:02.614361Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{(<Entity: TRPC1>,\n",
       "  <Entity: KCNMA1>): <Interaction: TRPC1 ============= KCNMA1 [Evidences: TRIP (2 references)]>,\n",
       " (<Entity: TRPC1>,\n",
       "  <Entity: PPP3CA>): <Interaction: TRPC1 ============= PPP3CA [Evidences: TRIP (1 references)]>,\n",
       " (<Entity: CALM2>,\n",
       "  <Entity: TRPC1>): <Interaction: CALM2 =======(-)==> TRPC1 [Evidences: TRIP (3 references)]>,\n",
       " (<Entity: CALM3>,\n",
       "  <Entity: TRPC1>): <Interaction: CALM3 =======(-)==> TRPC1 [Evidences: TRIP (3 references)]>,\n",
       " (<Entity: CALM1>,\n",
       "  <Entity: TRPC1>): <Interaction: CALM1 =======(-)==> TRPC1 [Evidences: TRIP (3 references)]>,\n",
       " (<Entity: CASP1>,\n",
       "  <Entity: TRPC1>): <Interaction: CASP1 ============= TRPC1 [Evidences: TRIP (1 references)]>,\n",
       " (<Entity: TRPC1>,\n",
       "  <Entity: CASP4>): <Interaction: TRPC1 ============= CASP4 [Evidences: TRIP (1 references)]>,\n",
       " (<Entity: TRPC1>,\n",
       "  <Entity: CACNA1C>): <Interaction: TRPC1 ============= CACNA1C [Evidences: TRIP (1 references)]>,\n",
       " (<Entity: TRPC1>,\n",
       "  <Entity: CAV1>): <Interaction: TRPC1 <=(+)======== CAV1 [Ev"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 118492 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n.interactions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dict under `Network.nodes` is kept in sync with the interactions, and facilitates node access. Keys are primary identifiers (for proteins UniProt IDs by default), values are `Entity` objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:21.933545Z",
     "start_time": "2022-12-02T14:06:21.903749Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'P48995': <Entity: TRPC1>,\n",
       " 'Q12791': <Entity: KCNMA1>,\n",
       " 'Q08209': <Entity: PPP3CA>,\n",
       " 'P0DP24': <Entity: CALM2>,\n",
       " 'P0DP25': <Entity: CALM3>,\n",
       " 'P0DP23': <Entity: CALM1>,\n",
       " 'P29466': <Entity: CASP1>,\n",
       " 'P49662': <Entity: CASP4>,\n",
       " 'Q13936': <Entity: CACNA1C>,\n",
       " 'Q03135': <Entity: CAV1>,\n",
       " 'P56539': <Entity: CAV3>,\n",
       " 'Q14247': <Entity: CTTN>,\n",
       " 'P14416': <Entity: DRD2>,\n",
       " 'P11532': <Entity: DMD>,\n",
       " 'P11362': <Entity: FGFR1>,\n",
       " 'Q02790': <Entity: FKBP4>,\n",
       " 'Q86YM7': <Entity: HOMER1>,\n",
       " 'Q9NSC5': <Entity: HOMER3>,\n",
       " 'Q99750': <Entity: MDFI>,\n",
       " 'Q14571': <Entity: ITPR2>,\n",
       " 'Q14573': <Entity: ITPR3>,\n",
       " 'P29966': <Entity: MARCKS>,\n",
       " 'Q13255': <Entity: GRM1>,\n",
       " 'P20591': <Entity: MX1>,\n",
       " 'P62166': <Entity: NCS1>,\n",
       " 'Q96D31': <Entity: ORAI1>,\n",
       " 'Q96SN7': <Entity: ORAI2>,\n",
       " 'Q9BRQ5': <Entity: ORAI3>,\n",
       " 'P11171': <Entity: EPB41>,\n",
       " 'P61586': <Entity: RHOA>,\n",
       " 'Q9Y225': <Entity: RNF24>,\n",
       " 'P21817': <Entity: RYR1>,\n",
       " 'P16615': <Entity: ATP2A2>,\n",
       " 'Q93084': <Entity: ATP2A3>,\n",
       " 'P60880': <Entity: SNAP25>,\n",
       " 'Q13586': <Entity: STI"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 30573 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n.nodes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An interaction between a pair of entities can be accessed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:27.158077Z",
     "start_time": "2022-12-02T14:06:27.148686Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Interaction: EGFR <=(+)======== EGF [Evidences: Baccin2019, CellTalkDB, Fantom5, Guide2Pharma, HPMR, HPRD, ICELLNET, LRdb, Ramilowski2015, SIGNOR, SPIKE, SignaLink3, cellsignal.com, connectomeDB2020 (17 references)]>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n.interaction('EGF', 'EGFR')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly, individual nodes can be looked up:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:29.156341Z",
     "start_time": "2022-12-02T14:06:29.150576Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Entity: EGFR>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n.entity('EGFR')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Labels (gene symbols for proteins by default), identifiers (such as UniProt IDs) and `Entity` objects can be used to refer to nodes. Each node carries some basic information:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:32.405576Z",
     "start_time": "2022-12-02T14:06:32.400917Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('P00533', 'EGFR', 'protein', 'uniprot', 9606)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "egfr = n.entity('EGFR')\n",
    "egfr.identifier, egfr.label, egfr.entity_type, egfr.id_type, egfr.taxon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interactions feature a number of methods to access various information, such as their types, direction, effect, resources, references, etc. The very same methods are also available for the whole network. Below we only show a few examples of these methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:34.678142Z",
     "start_time": "2022-12-02T14:06:34.673243Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Interaction: EGFR <=(+)======== EGF [Evidences: Baccin2019, CellTalkDB, Fantom5, Guide2Pharma, HPMR, HPRD, ICELLNET, LRdb, Ramilowski2015, SIGNOR, SPIKE, SignaLink3, cellsignal.com, connectomeDB2020 (17 references)]>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia = n.interaction('EGF', 'EGFR')\n",
    "ia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:47.686986Z",
     "start_time": "2022-12-02T14:06:47.681539Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Baccin2019',\n",
       " 'CellTalkDB',\n",
       " 'HPMR',\n",
       " 'ICELLNET',\n",
       " 'LRdb',\n",
       " 'SIGNOR',\n",
       " 'SPIKE',\n",
       " 'SignaLink3',\n",
       " 'connectomeDB2020'}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_resource_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:50.693823Z",
     "start_time": "2022-12-02T14:06:50.690237Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<Reference: 10085134>,\n",
       " <Reference: 10209155>,\n",
       " <Reference: 10788520>,\n",
       " <Reference: 12093292>,\n",
       " <Reference: 12297050>,\n",
       " <Reference: 12620237>,\n",
       " <Reference: 12648462>,\n",
       " <Reference: 15620700>,\n",
       " <Reference: 16274239>,\n",
       " <Reference: 17145710>,\n",
       " <Reference: 19531499>,\n",
       " <Reference: 20458382>,\n",
       " <Reference: 21071413>,\n",
       " <Reference: 23331499>,\n",
       " <Reference: 3494473>,\n",
       " <Reference: 6289330>,\n",
       " <Reference: 8639530>}"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_references()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a valid direction for this interaction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:53.319799Z",
     "start_time": "2022-12-02T14:06:53.311258Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_direction(('EGF', 'EGFR'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The opposite direction is not supported by any of the resources:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:06:55.487576Z",
     "start_time": "2022-12-02T14:06:55.480603Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_direction(('EGFR', 'EGF'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, some resources provide no direction information, these are classified as *\"undirected\"*:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ia.get_direction('undirected')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can check which resources are those exactly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:07:23.720763Z",
     "start_time": "2022-12-02T14:07:23.713450Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'HPMR', 'SPIKE'}"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_direction('undirected', sources = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Effect signs (stimulation, inhibition) are available in a similar way. The first one of the Boolean values mean stimulation (activation), the second one inhibition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:07:25.740206Z",
     "start_time": "2022-12-02T14:07:25.734527Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[True, False]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_sign(('EGF', 'EGFR'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Which resources support the effect signs:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:07:28.761822Z",
     "start_time": "2022-12-02T14:07:28.754876Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'SIGNOR', 'SPIKE', 'SignaLink3'}, set()]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_sign(('EGF', 'EGFR'), sources = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Many methods start by `get_...`, such as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:07:30.422085Z",
     "start_time": "2022-12-02T14:07:30.417861Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'post_translational'}"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_interaction_types()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Others are called `..._by_...`, these combine two `get_...` methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:07:32.499528Z",
     "start_time": "2022-12-02T14:07:32.494759Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ICELLNET': {<Reference: 8639530>},\n",
       " 'SIGNOR': {<Reference: 12297050>, <Reference: 12648462>},\n",
       " 'SignaLink3': {<Reference: 10085134>,\n",
       "  <Reference: 10209155>,\n",
       "  <Reference: 19531499>,\n",
       "  <Reference: 21071413>,\n",
       "  <Reference: 23331499>},\n",
       " 'Baccin2019': {<Reference: 10788520>,\n",
       "  <Reference: 12093292>,\n",
       "  <Reference: 12297050>,\n",
       "  <Reference: 12620237>,\n",
       "  <Reference: 15620700>,\n",
       "  <Reference: 16274239>,\n",
       "  <Reference: 6289330>},\n",
       " 'LRdb': {<Reference: 10788520>,\n",
       "  <Reference: 12093292>,\n",
       "  <Reference: 12297050>,\n",
       "  <Reference: 12620237>,\n",
       "  <Reference: 15620700>,\n",
       "  <Reference: 16274239>,\n",
       "  <Reference: 6289330>},\n",
       " 'SPIKE': {<Reference: 12297050>,\n",
       "  <Reference: 17145710>,\n",
       "  <Reference: 20458382>,\n",
       "  <Reference: 3494473>},\n",
       " 'CellTalkDB': {<Reference: 12093292>},\n",
       " 'connectomeDB2020': {<Reference: 10788520>,\n",
       "  <Reference: 12093292>,\n",
       "  <Reference: 12297050>,\n",
       "  <Reference: 12620237>,\n",
       "  <Reference: 15620700>,\n",
       "  <Reference: 16274239>,\n",
       "  <Reference: 6289330>},\n",
       " 'HPMR': {<Reference: 6289330>}}"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.references_by_resource()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And all these methods accept the same filtering parameters. E.g. if you are interested only in certain resources, it's possible to restrict the query to those. For example, the two resources below provide no positive sign interaction: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:07:39.803804Z",
     "start_time": "2022-12-02T14:07:39.799680Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "()"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_interactions_positive(resources = {'ICELLNET', 'HPMR'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While some other resources do:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:07:42.299260Z",
     "start_time": "2022-12-02T14:07:42.295822Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((<Entity: EGF>, <Entity: EGFR>),)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_interactions_positive(resources = {'SignaLink3'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or see the references that do or do not provide effect sign:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:07:44.630204Z",
     "start_time": "2022-12-02T14:07:44.624656Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({<Reference: 10085134>,\n",
       "  <Reference: 10209155>,\n",
       "  <Reference: 12297050>,\n",
       "  <Reference: 12648462>,\n",
       "  <Reference: 19531499>,\n",
       "  <Reference: 20458382>,\n",
       "  <Reference: 21071413>,\n",
       "  <Reference: 23331499>},\n",
       " {<Reference: 10085134>,\n",
       "  <Reference: 10209155>,\n",
       "  <Reference: 10788520>,\n",
       "  <Reference: 12093292>,\n",
       "  <Reference: 12297050>,\n",
       "  <Reference: 12620237>,\n",
       "  <Reference: 12648462>,\n",
       "  <Reference: 15620700>,\n",
       "  <Reference: 16274239>,\n",
       "  <Reference: 17145710>,\n",
       "  <Reference: 19531499>,\n",
       "  <Reference: 20458382>,\n",
       "  <Reference: 21071413>,\n",
       "  <Reference: 23331499>,\n",
       "  <Reference: 3494473>,\n",
       "  <Reference: 6289330>,\n",
       "  <Reference: 8639530>})"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ia.get_references(effect = True), ia.get_references(effect = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Network in *pandas.DataFrame* <a class=\"anchor\" id=\"network-pandas\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Contents of a `pypath.core.network.Network` object can be exported to a `pandas.DataFrame`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:24:19.479911Z",
     "start_time": "2022-12-03T15:23:56.070917Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_a</th>\n",
       "      <th>id_b</th>\n",
       "      <th>type_a</th>\n",
       "      <th>type_b</th>\n",
       "      <th>directed</th>\n",
       "      <th>effect</th>\n",
       "      <th>type</th>\n",
       "      <th>dmodel</th>\n",
       "      <th>sources</th>\n",
       "      <th>references</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>P48995</td>\n",
       "      <td>Q12791</td>\n",
       "      <td>protein</td>\n",
       "      <td>protein</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>post_translational</td>\n",
       "      <td>{activity_flow}</td>\n",
       "      <td>{TRIP}</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>P48995</td>\n",
       "      <td>Q08209</td>\n",
       "      <td>protein</td>\n",
       "      <td>protein</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>post_translational</td>\n",
       "      <td>{activity_flow}</td>\n",
       "      <td>{TRIP}</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>P0DP23</td>\n",
       "      <td>P48995</td>\n",
       "      <td>protein</td>\n",
       "      <td>protein</td>\n",
       "      <td>True</td>\n",
       "      <td>-1</td>\n",
       "      <td>post_translational</td>\n",
       "      <td>{activity_flow}</td>\n",
       "      <td>{TRIP}</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>P0DP25</td>\n",
       "      <td>P48995</td>\n",
       "      <td>protein</td>\n",
       "      <td>protein</td>\n",
       "      <td>True</td>\n",
       "      <td>-1</td>\n",
       "      <td>post_translational</td>\n",
       "      <td>{activity_flow}</td>\n",
       "      <td>{TRIP}</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>P0DP24</td>\n",
       "      <td>P48995</td>\n",
       "      <td>protein</td>\n",
       "      <td>protein</td>\n",
       "      <td>True</td>\n",
       "      <td>-1</td>\n",
       "      <td>post_translational</td>\n",
       "      <td>{activity_flow}</td>\n",
       "      <td>{TRIP}</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44033</th>\n",
       "      <td>Q14289</td>\n",
       "      <td>Q9ULZ3</td>\n",
       "      <td>protein</td>\n",
       "      <td>protein</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>post_translational</td>\n",
       "      <td>{enzyme_substrate}</td>\n",
       "      <td>{iPTMnet}</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44034</th>\n",
       "      <td>P54646</td>\n",
       "      <td>Q9Y2I7</td>\n",
       "      <td>protein</td>\n",
       "      <td>protein</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>post_translational</td>\n",
       "      <td>{enzyme_substrate}</td>\n",
       "      <td>{iPTMnet}</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44035</th>\n",
       "      <td>Q9BXM7</td>\n",
       "      <td>Q9Y2N7</td>\n",
       "      <td>protein</td>\n",
       "      <td>protein</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>post_translational</td>\n",
       "      <td>{enzyme_substrate}</td>\n",
       "      <td>{iPTMnet}</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44036</th>\n",
       "      <td>P49137</td>\n",
       "      <td>Q9Y385</td>\n",
       "      <td>protein</td>\n",
       "      <td>protein</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>post_translational</td>\n",
       "      <td>{enzyme_substrate}</td>\n",
       "      <td>{iPTMnet}</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44037</th>\n",
       "      <td>Q9UHC7</td>\n",
       "      <td>P04637</td>\n",
       "      <td>protein</td>\n",
       "      <td>protein</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>post_translational</td>\n",
       "      <td>{enzyme_substrate}</td>\n",
       "      <td>{iPTMnet}</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>44038 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         id_a    id_b   type_a   type_b  directed  effect                type  \\\n",
       "0      P48995  Q12791  protein  protein     False       0  post_translational   \n",
       "1      P48995  Q08209  protein  protein     False       0  post_translational   \n",
       "2      P0DP23  P48995  protein  protein      True      -1  post_translational   \n",
       "3      P0DP25  P48995  protein  protein      True      -1  post_translational   \n",
       "4      P0DP24  P48995  protein  protein      True      -1  post_translational   \n",
       "...       ...     ...      ...      ...       ...     ...                 ...   \n",
       "44033  Q14289  Q9ULZ3  protein  protein      True       0  post_translational   \n",
       "44034  P54646  Q9Y2I7  protein  protein      True       0  post_translational   \n",
       "44035  Q9BXM7  Q9Y2N7  protein  protein      True       0  post_translational   \n",
       "44036  P49137  Q9Y385  protein  protein      True       0  post_translational   \n",
       "44037  Q9UHC7  P04637  protein  protein      True       0  post_translational   \n",
       "\n",
       "                   dmodel    sources references  \n",
       "0         {activity_flow}     {TRIP}        NaN  \n",
       "1         {activity_flow}     {TRIP}        NaN  \n",
       "2         {activity_flow}     {TRIP}        NaN  \n",
       "3         {activity_flow}     {TRIP}        NaN  \n",
       "4         {activity_flow}     {TRIP}        NaN  \n",
       "...                   ...        ...        ...  \n",
       "44033  {enzyme_substrate}  {iPTMnet}        NaN  \n",
       "44034  {enzyme_substrate}  {iPTMnet}        NaN  \n",
       "44035  {enzyme_substrate}  {iPTMnet}        NaN  \n",
       "44036  {enzyme_substrate}  {iPTMnet}        NaN  \n",
       "44037  {enzyme_substrate}  {iPTMnet}        NaN  \n",
       "\n",
       "[44038 rows x 10 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "cu = omnipath.db.get_db('curated')\n",
    "cu.make_df()\n",
    "cu.df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Translating identifiers <a class=\"anchor\" id=\"mapping\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `pypath.utils.mapping` module is for ID translation, most of the time you can simply call the `map_name` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:27.911752Z",
     "start_time": "2022-12-02T14:17:27.907633Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'EGFR'}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.utils import mapping\n",
    "mapping.map_name('P00533', 'uniprot', 'genesymbol')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default the `map_name` function returns a `set` because it accounts for ambiguous mapping. However most often the ID translation is unambiguous, and you want to retrieve only one ID. The `map_name0` returns a string, even in case of ambiguity, it returns a random element from the resulted set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:31.426141Z",
     "start_time": "2022-12-02T14:17:31.418263Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Q9BY60'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping.map_name0('GABARAPL3', 'genesymbol', 'uniprot')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Molecules have large variety of identifiers, but in pypath two identifier types are special:\n",
    "\n",
    "- The *primary identifier* defines the molecule category, e.g. if UniProt is the primary identifier for proteins, then a protein is anything that has a UniProt ID\n",
    "- The *label* is a human readable identifier, for proteins it's gene symbol\n",
    "    \n",
    "The primary ID and label types are configured for each molecule type (protein, miRNA, drug, etc) in the module settings.\n",
    "The `mapping` module provides shortcuts to translate between these identifiers: `label` and `id_from_label`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:33.521610Z",
     "start_time": "2022-12-02T14:17:33.516412Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ULK1'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping.label('O75385')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:35.558354Z",
     "start_time": "2022-12-02T14:17:35.551050Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'O75385'}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping.id_from_label('ULK1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:37.948924Z",
     "start_time": "2022-12-02T14:17:37.943666Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'O75385'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping.id_from_label0('ULK1')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Multiple IDs can be translated in one call, however, it's not possible to know certainly which output corresponds to which input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:40.210259Z",
     "start_time": "2022-12-02T14:17:40.200864Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'O75385', 'P00533', 'Q15796'}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping.map_names(['ULK1', 'EGFR', 'SMAD2'], 'genesymbol', 'uniprot')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The default organism is defined in the module settings, it is human by default. Translating for other organisms requires the `ncbi_tax_id` argument. Most of the functions in `pypath` accepts also common or latin names, but `map_name` accepts only numeric taxon IDs for efficiency. Let's translate a mouse identifier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:44.115376Z",
     "start_time": "2022-12-02T14:17:44.106197Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Q62432'}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping.map_name('Smad2', 'genesymbol', 'uniprot', ncbi_tax_id = 10090)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If no direct translation table is available between two ID types, `pypath` will try to translate by an intermediate ID type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:46.272012Z",
     "start_time": "2022-12-02T14:17:46.266050Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ULK1'}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping.map_name('8408', 'entrez', 'genesymbol')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Behind the scenes the `chain_map` function is called:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:47.758541Z",
     "start_time": "2022-12-02T14:17:47.753420Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ULK1'}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m = mapping.get_mapper()\n",
    "m.chain_map('8408', id_type = 'entrez', target_id_type = 'genesymbol', by_id_type = 'uniprot')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And the procedure corresponds to the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:49.119866Z",
     "start_time": "2022-12-02T14:17:49.113494Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ULK1'}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping.map_names(\n",
    "    mapping.map_name('8408', 'entrez', 'uniprot'),\n",
    "    'uniprot',\n",
    "    'genesymbol',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pre-defined ID translation tables\n",
    "\n",
    "A number of mapping tables are pre-defined, these load automatically on demand, and are removed from the memory if not used for some time (5 minutes by default). New mapping tables are saved directly into pickle files in the cache for a quick reload. Tables are either organism specific (hence loaded for each organism one-by-one), or non-organism specific, such as drug IDs (`pypath` uses integer `0` in this case in place of the numeric NCBI Taxonomy ID). The identifier translation data is retrieved from the following sources:\n",
    "\n",
    "- UniProt legacy API (main UniProt API until autumn 2022): `internals.input_formats.UniprotMapping`\n",
    "- UniProt uploadlists API (also outdated, replaced by the new UniProt API): `internals.inputs_formats.UniprotListMapping`\n",
    "- Ensembl Biomart: `internals.input_formats.BiomartMapping` and `internals.input_formats.ArrayMapping` (for microarray probes)\n",
    "- Protein Ontology Consortium: `internals.input_formats.ProMapping`\n",
    "- UniChem: `internals.input_formats.UnichemMapping`\n",
    "- Arbitrary files: `internals.input_formats.FileMapping` (this class is used to process data from miRBase, some files from the UniProt FTP site, and also user defined, custom cases)\n",
    "\n",
    "Some of the classes above are instantiated in `internals.maps`, but most of the instances are created on the fly when loading a mapping table in `utils.mapping.MapReader`. This latter class is responsible to take a table definition and load a `utils.mapping.MappingTable` instance. The whole process is managed by `utils.mapping.Mapper`, this is the object all the ID translation queries are dispatched to. It has a method to list the defined ID translation tables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:53.323661Z",
     "start_time": "2022-12-02T14:17:53.312282Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[MappingTableDefinition(id_type_a='embl', id_type_b='uniprot', resource='uniprot', input_class='UniprotMapping', resource_id_type_a='database(embl)', resource_id_type_b='id'),\n",
       " MappingTableDefinition(id_type_a='genesymbol', id_type_b='uniprot', resource='uniprot', input_class='UniprotMapping', resource_id_type_a='genes(PREFERRED)', resource_id_type_b='id'),\n",
       " MappingTableDefinition(id_type_a='genesymbol-syn', id_type_b='uniprot', resource='uniprot', input_class='UniprotMapping', resource_id_type_a='genes(ALTERNATIVE)', resource_id_type_b='id'),\n",
       " MappingTableDefinition(id_type_a='entrez', id_type_b='uniprot', resource='uniprot', input_class='UniprotMapping', resource_id_type_a='database(geneid)', resource_id_type_b='id'),\n",
       " MappingTableDefinition(id_type_a='hgnc', id_type_b='uniprot', resource='uniprot', input_class='UniprotMapping', resource_id_type_a='database(HGNC)', resource_id_type_b='id'),\n",
       " MappingTableDefinition(id_type_a='refseqp', id_type_b='uniprot', resource='uniprot', input_cl"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 22169 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m = mapping.get_mapper()\n",
    "m.mapping_tables()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pypath uses synonyms to refer to ID types: these are intended to be short, clear and lowercase for ease of use. Most of the synonyms are defined in `internals.input_formats`, in the `AC_QUERY`, `AC_MAPPING`, `BIOMART_MAPPING`, `PRO_MAPPING` and `ARRAY_MAPPING` dictionaries. UniChem ID types are used exactly as provided by UniChem. To list all available ID types (below *pypath* is the synonym used here, *original* is the name in the original resource):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:17:58.992633Z",
     "start_time": "2022-12-02T14:17:58.986799Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{IdType(pypath='MedChemExpress', original='MedChemExpress'),\n",
       " IdType(pypath='actor', original='actor'),\n",
       " IdType(pypath='affy', original='affy'),\n",
       " IdType(pypath='affymetrix', original='affymetrix'),\n",
       " IdType(pypath='agilent', original='agilent'),\n",
       " IdType(pypath='alzforum', original='Alzforum_mut'),\n",
       " IdType(pypath='araport', original='Araport'),\n",
       " IdType(pypath='atlas', original='atlas'),\n",
       " IdType(pypath='bindingdb', original='bindingdb'),\n",
       " IdType(pypath='brenda', original='brenda'),\n",
       " IdType(pypath='carotenoiddb', original='carotenoiddb'),\n",
       " IdType(pypath='cgnc', original='CGNC'),\n",
       " IdType(pypath='chebi', original='chebi'),\n",
       " IdType(pypath='chembl', original='chembl'),\n",
       " IdType(pypath='chemicalbook', original='chemicalbook'),\n",
       " IdType(pypath='clinicaltrials', original='clinicaltrials'),\n",
       " IdType(pypath='codelink', original='codelink'),\n",
       " IdType(pypath='comptox', original='comptox'),\n",
       " IdType(pypath='dailymed', original='dailymed'),\n",
       " IdType(pypath='dailymed_old', original='dailymed_old'),\n",
       " IdType(py"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 6649 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m = mapping.get_mapper()\n",
    "m.id_types()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Homology translation\n",
    "\n",
    "The `utils.homology` module handles translation of data between organism by orthologous gene pairs. Its most important function is `translate`. The source organism is human by default, the target must be provided, below we use mouse (NCBI Taxonomy 10090):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:36:30.677741Z",
     "start_time": "2022-12-03T15:36:30.601032Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Q01279'}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.utils import homology\n",
    "homology.translate('P00533', target = 10090)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ID translation and homology translation are integrated, hence not only UniProt IDs can be translated:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:18:05.181867Z",
     "start_time": "2022-12-02T14:18:05.114049Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Egfr'}"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "homology.translate('EGFR', target = 10090, id_type = 'genesymbol')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This module uses data from NCBI HomoloGene and Ensembl. The latter covers more organisms, and accepts some parameters (high confidence, one-to-one vs. one-to-many mapping). These parameters can be controlled by the settings module, or passed to the functions above and below. For some reason the settings below fail to find any ortholog of our example protein:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:18:07.062911Z",
     "start_time": "2022-12-02T14:18:07.053896Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set()"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "homology.translate('P00533', target = 10090, homologene = False, ensembl = False, ensembl_hc = False, ensembl_types = 'one2one')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Homology translation tables as dictionaries\n",
    "\n",
    "The translation tables are available as dicts of sets, these are convenient for use outside of pypath:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:18:09.872102Z",
     "start_time": "2022-12-02T14:18:09.006307Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Egfr'}"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "human_mouse_genesymbols = homology.get_dict(target = 'mouse', id_type = 'genesymbol')\n",
    "human_mouse_genesymbols['EGFR']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Homology translation data frames\n",
    "\n",
    "Similarly, `pandas.DataFrame`s are available:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:36:36.124841Z",
     "start_time": "2022-12-03T15:36:34.042594Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MICOS13</td>\n",
       "      <td>Micos13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FAT4</td>\n",
       "      <td>Fat4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RARS2</td>\n",
       "      <td>Rars2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ZFP36L2</td>\n",
       "      <td>Zfp36l2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>LAMC1</td>\n",
       "      <td>Lamc1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24843</th>\n",
       "      <td>KRTAP4-16</td>\n",
       "      <td>Gm40460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24844</th>\n",
       "      <td>KRTAP4-16</td>\n",
       "      <td>Gm45618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24845</th>\n",
       "      <td>KRTAP4-16</td>\n",
       "      <td>Gm4559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24846</th>\n",
       "      <td>IGKV1OR2-108</td>\n",
       "      <td>Igkv20-101-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24847</th>\n",
       "      <td>FPGT-TNNI3K</td>\n",
       "      <td>Tnni3k</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22266 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             source        target\n",
       "0           MICOS13       Micos13\n",
       "1              FAT4          Fat4\n",
       "2             RARS2         Rars2\n",
       "4           ZFP36L2       Zfp36l2\n",
       "5             LAMC1         Lamc1\n",
       "...             ...           ...\n",
       "24843     KRTAP4-16       Gm40460\n",
       "24844     KRTAP4-16       Gm45618\n",
       "24845     KRTAP4-16        Gm4559\n",
       "24846  IGKV1OR2-108  Igkv20-101-2\n",
       "24847   FPGT-TNNI3K        Tnni3k\n",
       "\n",
       "[22266 rows x 2 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "human_mouse_genesymbols = homology.get_df(target = 'mouse', id_type = 'genesymbol')\n",
    "human_mouse_genesymbols"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Taxonomy\n",
    "\n",
    "Organisms matter everywhere, both in the input, output and processing parts of pypath. For this reason we created a utility module to deal with translation of organism identifiers. We prefer NCBI Taxonomy IDs as the primary organism identifier. These are simple numbers, 9606 is human, 10090 is mouse, etc. Many databases use common English names or latin (scientific) names. Then some databases use custom codes, such as *hsapiens* in Ensmebl (first letter of genus name + species name, without space, all lowercase); *hsa* in miRBase and KEGG (first letter of genus name, first two letters of species name). The `pypath.utils.taxonomy` module features some convenient functions for handling all these names.\n",
    "\n",
    "### Translating to NCBI Taxonomy, scientific names and common names\n",
    "\n",
    "The most often used is `ensure_ncbi_tax_id`, which returns the NCBI Taxonomy ID for any comprehensible input:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:18:22.033384Z",
     "start_time": "2022-12-02T14:18:22.028246Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9606, 9606, 9606, 9606, 9606)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.utils import taxonomy\n",
    "taxonomy.ensure_ncbi_tax_id('human'), taxonomy.ensure_ncbi_tax_id('H sapiens'), taxonomy.ensure_ncbi_tax_id('hsapiens'), taxonomy.ensure_ncbi_tax_id(9606), taxonomy.ensure_ncbi_tax_id('Homo sapiens')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To access scientific names or common names:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:18:25.947472Z",
     "start_time": "2022-12-02T14:18:25.942020Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Bos taurus'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taxonomy.ensure_latin_name('cow')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:18:27.214897Z",
     "start_time": "2022-12-02T14:18:27.091877Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'European robin'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taxonomy.ensure_common_name('Erithacus rubecula')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Organism from UniProt ID\n",
    "\n",
    "The `uniprot_taxid` function returns the taxonomy ID for a SwissProt ID. Unfortunately it does not work for TrEMBL IDs, that would require to keep too much data in memory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:18:30.046562Z",
     "start_time": "2022-12-02T14:18:28.853983Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Saccharomyces cerevisiae'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taxonomy.ensure_latin_name(taxonomy.uniprot_taxid('P53104'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## UniProt\n",
    "\n",
    "UniProt is a huge, diverse resource that is essential for *pypath* as we use it as a reference set for proteomes and it provides ID translation data. Its input module `pypath.inputs.uniprot` is already more complex than an average input module. It harbors a little database manager that loads and unloads tables on demand, ensuring fast and convenient operation. Further services are available in the `pypath.utils.uniprot` module."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The UniProt input module\n",
    "\n",
    "#### All UniProt IDs for one organism\n",
    "\n",
    "The complete set of UniProt IDs for an organism is considered to be the proteome of the organism, and it is used in many procedures across *pypath*. All SwissProt IDs, all TrEMBL IDs or both together can be retrieved:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:07:43.513053Z",
     "start_time": "2022-12-02T16:04:09.519841Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(86440, 17131, 69300)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.inputs import uniprot as iuniprot\n",
    "(\n",
    "    len(iuniprot.all_uniprots(organism = 10090)),\n",
    "    len(iuniprot.all_swissprots(organism = 10090)),\n",
    "    len(iuniprot.all_trembls(organism = 10090)),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### UniProt ID format validation\n",
    "\n",
    "UniProt defines a format for its accessions, any string can be checked against this template to tell if it's possibly a valid ID:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:17:41.293811Z",
     "start_time": "2022-12-02T16:17:41.289834Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.inputs import uniprot as iuniprot\n",
    "iuniprot.valid_uniprot('A0A8D0H0C2')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### UniProt ID validation\n",
    "\n",
    "Another functions check if an ID indeed exists in UniProt. These functions require loading the list of all UniProt IDs for the organism, hence calling them the first time might take even a few minutes (in case new download is necessary). Subsequent calls will be much faster."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:17:44.423716Z",
     "start_time": "2022-12-02T16:17:44.419502Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.inputs import uniprot as iuniprot\n",
    "iuniprot.is_uniprot('P00533')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:14:14.625540Z",
     "start_time": "2022-12-02T16:14:14.615893Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iuniprot.is_swissprot('P00533')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the organism doesn't match:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:15:07.867560Z",
     "start_time": "2022-12-02T16:15:07.842381Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iuniprot.is_uniprot('P00533', organism = 10090)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Single UniProt protein datasheet\n",
    "\n",
    "Raw contents of protein datasheets can be retrieved. The structure is a Python list with tuples of two elements, the first is the tag of the line, the second is the line content."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:18:06.048259Z",
     "start_time": "2022-12-02T16:18:05.975273Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('ID', 'EGFR_HUMAN              Reviewed;        1210 AA.'),\n",
       " ('AC',\n",
       "  'P00533; O00688; O00732; P06268; Q14225; Q68GS5; Q92795; Q9BZS2; Q9GZX1;'),\n",
       " ('AC', 'Q9H2C9; Q9H3C9; Q9UMD7; Q9UMD8; Q9UMG5;'),\n",
       " ('DT', '21-JUL-1986, integrated into UniProtKB/Swiss-Prot.'),\n",
       " ('DT', '01-NOV-1997, sequence version 2.'),\n",
       " ('DT', '12-OCT-2022, entry version 283.'),\n",
       " ('DE', 'RecName: Full=Epidermal growth factor receptor {ECO:0000305};'),\n",
       " ('DE', 'EC=2.7.10.1;'),\n",
       " ('DE', 'AltName: Full=Proto-oncogene c-ErbB-1;'),\n",
       " ('DE', 'AltName: Full=Receptor tyrosine-protein kinase erbB-1;'),\n",
       " ('DE', 'Flags: Precursor;'),\n",
       " ('GN', 'Name=EGFR {ECO:0000312|HGNC:HGNC:3236}; Synonyms=ERBB, ERBB1, HER1;'),\n",
       " ('OS', 'Homo sapiens (Human).'),\n",
       " ('OC',\n",
       "  'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia;'),\n",
       " ('OC',\n",
       "  'Eutheria; Euarchontoglires; Primates; Haplorrhini; Catarrhini; Hominidae;'),\n",
       " ('OC', 'Homo.'),\n",
       " ('OX', 'NCBI_TaxID=9606;'),\n",
       " ('RN', '[1]'),\n",
       " ('RP',\n",
       "  'NUCLEOTIDE SEQUENCE [MRNA] (ISOFORM"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 58080 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pypath.inputs import uniprot as iuniprot\n",
    "iuniprot.protein_datasheet('P00533')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### History of UniProt records"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:21:15.449962Z",
     "start_time": "2022-12-02T16:21:15.440384Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[UniprotRecordHistory(entry_version='283', sequence_version='2', entry_name='EGFR_HUMAN', database='Swiss-Prot', number='2022_04', date='2022-10-12', replaces='', replaced_by=''),\n",
       " UniprotRecordHistory(entry_version='282', sequence_version='2', entry_name='EGFR_HUMAN', database='Swiss-Prot', number='2022_03', date='2022-08-03', replaces='', replaced_by=''),\n",
       " UniprotRecordHistory(entry_version='281', sequence_version='2', entry_name='EGFR_HUMAN', database='Swiss-Prot', number='2022_02', date='2022-05-25', replaces='', replaced_by=''),\n",
       " UniprotRecordHistory(entry_version='280', sequence_version='2', entry_name='EGFR_HUMAN', database='Swiss-Prot', number='2022_01', date='2022-02-23', replaces='', replaced_by=''),\n",
       " UniprotRecordHistory(entry_version='279', sequence_version='2', entry_name='EGFR_HUMAN', database='Swiss-Prot', number='2021_04', date='2021-09-29', replaces='', replaced_by=''),\n",
       " UniprotRecordHistory(entry_version='278', sequence_version='2', entry_name='EGFR_HUMAN', database='"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 50933 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pypath.inputs import uniprot as iuniprot\n",
    "egfr_history = list(iuniprot.uniprot_history('P00533'))\n",
    "egfr_history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:21:57.760689Z",
     "start_time": "2022-12-02T16:21:57.755888Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UniprotRecordHistory(entry_version='283', sequence_version='2', entry_name='EGFR_HUMAN', database='Swiss-Prot', number='2022_04', date='2022-10-12', replaces='', replaced_by='')"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iuniprot.uniprot_recent_version('P00533')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:22:33.284487Z",
     "start_time": "2022-12-02T16:22:32.688929Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('ID', 'EGFR_HUMAN              Reviewed;        1210 AA.'),\n",
       " ('AC',\n",
       "  'P00533; O00688; O00732; P06268; Q14225; Q68GS5; Q92795; Q9BZS2; Q9GZX1;'),\n",
       " ('AC', 'Q9H2C9; Q9H3C9; Q9UMD7; Q9UMD8; Q9UMG5;'),\n",
       " ('DT', '21-JUL-1986, integrated into UniProtKB/Swiss-Prot.'),\n",
       " ('DT', '01-NOV-1997, sequence version 2.'),\n",
       " ('DT', '12-OCT-2022, entry version 283.'),\n",
       " ('DE', 'RecName: Full=Epidermal growth factor receptor {ECO:0000305};'),\n",
       " ('DE', 'EC=2.7.10.1;'),\n",
       " ('DE', 'AltName: Full=Proto-oncogene c-ErbB-1;'),\n",
       " ('DE', 'AltName: Full=Receptor tyrosine-protein kinase erbB-1;'),\n",
       " ('DE', 'Flags: Precursor;'),\n",
       " ('GN', 'Name=EGFR {ECO:0000312|HGNC:HGNC:3236}; Synonyms=ERBB, ERBB1, HER1;'),\n",
       " ('OS', 'Homo sapiens (Human).'),\n",
       " ('OC',\n",
       "  'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia;'),\n",
       " ('OC',\n",
       "  'Eutheria; Euarchontoglires; Primates; Haplorrhini; Catarrhini; Hominidae;'),\n",
       " ('OC', 'Homo.'),\n",
       " ('OX', 'NCBI_TaxID=9606;'),\n",
       " ('RN', '[1]'),\n",
       " ('RP',\n",
       "  'NUCLEOTIDE SEQUENCE [MRNA] (ISOFORM"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 58080 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iuniprot.uniprot_history_recent_datasheet('P00533')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The functions above are able to retrieve the latest datasheet of deleted UniProt records. However, they are slow as several queries are performed to process a single protein."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### UniProt legacy API\n",
    "\n",
    "<a id=\"uniprot-data\"></a>\n",
    "UniProt deployed its new API in the autumn of 2022, since then the old API is available as a legacy option. In *pypath* this API is well supported. It is accessed by the `inputs.uniprot.uniprot_data` function, though higher level functions are more convenient for the users. For the function above, a list of fields can be passed. By default it uses only SwissProt. The output is a dict of dicts with fields as top level keys and UniProt IDs as second level keys. The results often contain notes, additional info in parentheses, prefixes and postfixes for identifiers, that are not needed in every situation. Using `uniprot_preprocess` instead of `uniprot_data` cleans up some of this clutter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:32:47.951824Z",
     "start_time": "2022-12-02T16:32:39.415372Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'family': {'P63120': 'Peptidase A2 family, HERV class-II K(HML-2) subfamily',\n",
       "  'Q96EC8': 'YIP1 family',\n",
       "  'Q6ZMS4': 'Krueppel C2H2-type zinc-finger protein family',\n",
       "  'Q8N8L2': 'Krueppel C2H2-type zinc-finger protein family',\n",
       "  'Q3MIS6': 'Krueppel C2H2-type zinc-finger protein family',\n",
       "  'Q86UK7': 'ZNF598 family',\n",
       "  'Q6P280': 'Krueppel C2H2-type zinc-finger protein family',\n",
       "  'Q969W1': 'DHHC palmitoyltransferase family',\n",
       "  'O14978': 'Krueppel C2H2-type zinc-finger protein family',\n",
       "  'Q15937': 'Krueppel C2H2-type zinc-finger protein family',\n",
       "  'Q9P2J8': 'Krueppel C2H2-type zinc-finger protein family',\n",
       "  'Q8IUH4': 'DHHC palmitoyltransferase family, AKR/ZDHHC17 subfamily',\n",
       "  'Q9Y2D9': 'Krueppel C2H2-type zinc-finger protein family',\n",
       "  'Q14588': 'Krueppel C2H2-type zinc-finger protein family',\n",
       "  'Q6XR72': 'Cation diffusion facilitator (CDF) transporter (TC 2.A.4) family, SLC30A subfamily',\n",
       "  'P58557': 'Endoribonuclease YbeY family',\n",
       "  'Q9Y5A9': 'YTHDF family, YTHDF2 subfamily',\n",
       "  'Q8N9L1"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 501768 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pypath.inputs import uniprot as iuniprot\n",
    "iuniprot.uniprot_data(field = ('family', 'keywords', 'transmembrane'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Processed UniProt annotations\n",
    "\n",
    "For a few important fields we have dedicated processing functions with the aim of making their format cleaner and better usable. Sometimes even these do an imperfect job, and certain fields are badly truncated or contain residual fragments of the stripped labels.\n",
    "\n",
    "<div class=\"alert alert-block alert-success\"><b>Note:</b> All the data presented below is part of the OmniPath annotations database, the recommended way to access it is <a href=\"an-dbmanager\">by the database manager</a>.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:40:33.425325Z",
     "start_time": "2022-12-02T16:40:32.692822Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'P00521': {'Abelson murine leukemia virus'},\n",
       " 'P03333': {'Abelson murine leukemia virus'},\n",
       " 'H8ZM73': {'Abies balsamea', 'Balsam fir', 'Pinus balsamea'},\n",
       " 'H8ZM71': {'Abies balsamea', 'Balsam fir', 'Pinus balsamea'},\n",
       " 'Q9MV51': {'Abies firma', 'Momi fir'},\n",
       " 'O81086': {'Abies grandis', 'Grand fir', 'Pinus grandis'},\n",
       " 'O24474': {'Abies grandis', 'Grand fir', 'Pinus grandis'},\n",
       " 'O24475': {'Abies grandis', 'Grand fir', 'Pinus grandis'},\n",
       " 'O64404': {'Abies grandis', 'Grand fir', 'Pinus grandis'},\n",
       " 'O64405': {'Abies grandis', 'Grand fir', 'Pinus grandis'},\n",
       " 'Q948Z0': {'Abies grandis', 'Grand fir', 'Pinus grandis'},\n",
       " 'Q9M7D1': {'Abies grandis', 'Grand fir', 'Pinus grandis'},\n",
       " 'Q9M7D0': {'Abies grandis', 'Grand fir', 'Pinus grandis'},\n",
       " 'O22340': {'Abies grandis', 'Grand fir', 'Pinus grandis'},\n",
       " 'Q9M7C9': {'Abies grandis', 'Grand fir', 'Pinus grandis'},\n",
       " 'Q5K3V1': {'Abies homolepis', 'Nikko fir'},\n",
       " 'P21715': {'Abrothrix jelskii', 'Akodon jelskii', \"Jelski's altiplano mouse\"},\n",
       " 'P11140': {'Abru"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 56985 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pypath.inputs import uniprot as iuniprot\n",
    "iuniprot.uniprot_taxonomy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:42:33.824020Z",
     "start_time": "2022-12-02T16:42:33.704114Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{648330: Taxon(ncbi_id=648330, latin='Aedes albopictus densovirus (isolate Boublik/1994)', english='AalDNV', latin_synonym=None),\n",
       " 10804: Taxon(ncbi_id=10804, latin='Adeno-associated virus 2', english='AAV-2', latin_synonym=None),\n",
       " 648242: Taxon(ncbi_id=648242, latin='Adeno-associated virus 2 (isolate Srivastava/1982)', english='AAV-2', latin_synonym=None),\n",
       " 118452: Taxon(ncbi_id=118452, latin='Abacion magnum', english='Millipede', latin_synonym=None),\n",
       " 72259: Taxon(ncbi_id=72259, latin='Abaeis nicippe', english='Sleepy orange butterfly', latin_synonym='Eurema nicippe'),\n",
       " 102642: Taxon(ncbi_id=102642, latin='Abax parallelepipedus', english='Ground beetle', latin_synonym=None),\n",
       " 392897: Taxon(ncbi_id=392897, latin='Abalistes stellaris', english='Starry triggerfish', latin_synonym='Balistes stellaris'),\n",
       " 75332: Taxon(ncbi_id=75332, latin='Abbottina rivularis', english='Chinese false gudgeon', latin_synonym='Gobio rivularis'),\n",
       " 515833: Taxon(ncbi_id=515833, latin='Abdopus aculeatus', engl"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 118050 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iuniprot.uniprot_ncbi_taxids_2()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:42:50.572753Z",
     "start_time": "2022-12-02T16:42:50.198376Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Q96EC8': {UniprotLocation(location='Golgi apparatus membrane', features=('Multi-pass membrane protein',))},\n",
       " 'Q6ZMS4': {UniprotLocation(location='Nucleus', features=None)},\n",
       " 'Q8N8L2': {UniprotLocation(location='Nucleus', features=None)},\n",
       " 'Q15916': {UniprotLocation(location='Nucleus', features=None)},\n",
       " 'Q3MIS6': {UniprotLocation(location='Nucleus', features=None)},\n",
       " 'Q6P280': {UniprotLocation(location='Nucleus', features=None)},\n",
       " 'Q969W1': {UniprotLocation(location='Endoplasmic reticulum membrane', features=('Multi-pass membrane protein',))},\n",
       " 'O14978': {UniprotLocation(location='Nucleus', features=None)},\n",
       " 'Q66K41': {UniprotLocation(location='Nucleus', features=None)},\n",
       " 'Q15937': {UniprotLocation(location='Nucleus', features=None)},\n",
       " 'Q9P2J8': {UniprotLocation(location='Nucleus', features=None)},\n",
       " 'Q8ND82': {UniprotLocation(location='Nucleus', features=None)},\n",
       " 'Q9NP64': {UniprotLocation(location='Nucleolus', features=None),\n",
       "  UniprotLocation(location='Nucleus', features=None)},\n",
       " 'P"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 143466 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iuniprot.uniprot_locations()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:43:06.919185Z",
     "start_time": "2022-12-02T16:43:06.594985Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'P63120': {UniprotKeyword(keyword='Aspartyl protease'),\n",
       "  UniprotKeyword(keyword='Autocatalytic cleavage'),\n",
       "  UniprotKeyword(keyword='ERV'),\n",
       "  UniprotKeyword(keyword='Hydrolase'),\n",
       "  UniprotKeyword(keyword='Protease'),\n",
       "  UniprotKeyword(keyword='Reference proteome'),\n",
       "  UniprotKeyword(keyword='Ribosomal frameshifting'),\n",
       "  UniprotKeyword(keyword='Transposable element')},\n",
       " 'Q96EC8': {UniprotKeyword(keyword='Acetylation'),\n",
       "  UniprotKeyword(keyword='Alternative splicing'),\n",
       "  UniprotKeyword(keyword='Golgi apparatus'),\n",
       "  UniprotKeyword(keyword='Membrane'),\n",
       "  UniprotKeyword(keyword='Phosphoprotein'),\n",
       "  UniprotKeyword(keyword='Reference proteome'),\n",
       "  UniprotKeyword(keyword='Transmembrane'),\n",
       "  UniprotKeyword(keyword='Transmembrane helix')},\n",
       " 'Q6ZMS4': {UniprotKeyword(keyword='Metal-binding'),\n",
       "  UniprotKeyword(keyword='Nucleus'),\n",
       "  UniprotKeyword(keyword='Phosphoprotein'),\n",
       "  UniprotKeyword(keyword='Reference proteome'),\n",
       "  UniprotKeyword(keyword='Repeat'),\n",
       "  UniprotKeyword(keyword='Zinc'),\n",
       "  Unipro"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 445111 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iuniprot.uniprot_keywords()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:43:22.297672Z",
     "start_time": "2022-12-02T16:43:22.216049Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'P63120': {UniprotFamily(family='Peptidase A2', subfamily='HERV class-II K(HML-2)')},\n",
       " 'Q96EC8': {UniprotFamily(family='YIP1', subfamily=None)},\n",
       " 'Q6ZMS4': {UniprotFamily(family='Krueppel C2H2-type zinc-finger protein', subfamily=None)},\n",
       " 'Q8N8L2': {UniprotFamily(family='Krueppel C2H2-type zinc-finger protein', subfamily=None)},\n",
       " 'Q3MIS6': {UniprotFamily(family='Krueppel C2H2-type zinc-finger protein', subfamily=None)},\n",
       " 'Q86UK7': {UniprotFamily(family='ZNF598', subfamily=None)},\n",
       " 'Q6P280': {UniprotFamily(family='Krueppel C2H2-type zinc-finger protein', subfamily=None)},\n",
       " 'Q969W1': {UniprotFamily(family='DHHC palmitoyltransferase', subfamily=None)},\n",
       " 'O14978': {UniprotFamily(family='Krueppel C2H2-type zinc-finger protein', subfamily=None)},\n",
       " 'Q15937': {UniprotFamily(family='Krueppel C2H2-type zinc-finger protein', subfamily=None)},\n",
       " 'Q9P2J8': {UniprotFamily(family='Krueppel C2H2-type zinc-finger protein', subfamily=None)},\n",
       " 'Q8IUH4': {UniprotFamily(family='DHHC palmitoyltransferase', "
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 77892 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iuniprot.uniprot_families()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:43:55.689899Z",
     "start_time": "2022-12-02T16:43:54.569998Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Q15916': {UniprotTissue(tissue='Brain', level='high'),\n",
       "  UniprotTissue(tissue='Wide', level='high')},\n",
       " 'Q969W1': {UniprotTissue(tissue='Wide', level='undefined')},\n",
       " 'O14978': {UniprotTissue(tissue='Brain', level='undefined'),\n",
       "  UniprotTissue(tissue='Colon', level='undefined'),\n",
       "  UniprotTissue(tissue='Heart', level='undefined'),\n",
       "  UniprotTissue(tissue='Kidney', level='undefined'),\n",
       "  UniprotTissue(tissue='Leukocyte', level='undefined'),\n",
       "  UniprotTissue(tissue='Liver', level='undefined'),\n",
       "  UniprotTissue(tissue='Lung', level='undefined'),\n",
       "  UniprotTissue(tissue='Ovary', level='undefined'),\n",
       "  UniprotTissue(tissue='Pancreas', level='undefined'),\n",
       "  UniprotTissue(tissue='Placenta', level='undefined'),\n",
       "  UniprotTissue(tissue='Prostate', level='undefined'),\n",
       "  UniprotTissue(tissue='Skeletal muscle', level='undefined'),\n",
       "  UniprotTissue(tissue='Small intestine', level='undefined'),\n",
       "  UniprotTissue(tissue='Spleen', level='undefined'),\n",
       "  UniprotTissue(tissue='Testis', level='undefined'),\n",
       "  Uniprot"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 318790 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iuniprot.uniprot_tissues()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T16:44:13.937512Z",
     "start_time": "2022-12-02T16:44:13.640392Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Q96EC8': {UniprotTopology(topology='Cytoplasmic', start=2, end=84),\n",
       "  UniprotTopology(topology='Cytoplasmic', start=137, end=146),\n",
       "  UniprotTopology(topology='Cytoplasmic', start=206, end=212),\n",
       "  UniprotTopology(topology='Lumenal', start=106, end=115),\n",
       "  UniprotTopology(topology='Lumenal', start=168, end=184),\n",
       "  UniprotTopology(topology='Lumenal', start=234, end=236),\n",
       "  UniprotTopology(topology='Transmembrane', start=85, end=105),\n",
       "  UniprotTopology(topology='Transmembrane', start=116, end=136),\n",
       "  UniprotTopology(topology='Transmembrane', start=147, end=167),\n",
       "  UniprotTopology(topology='Transmembrane', start=185, end=205),\n",
       "  UniprotTopology(topology='Transmembrane', start=213, end=233)},\n",
       " 'Q969W1': {UniprotTopology(topology='Cytoplasmic', start=1, end=77),\n",
       "  UniprotTopology(topology='Cytoplasmic', start=138, end=198),\n",
       "  UniprotTopology(topology='Cytoplasmic', start=288, end=377),\n",
       "  UniprotTopology(topology='Lumenal', start=99, end=116),\n",
       "  UniprotTopology(topology='Lumenal', start=220,"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 544230 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iuniprot.uniprot_topology()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The UniProt utils module\n",
    "\n",
    "\n",
    "#### Datasheets\n",
    "\n",
    "The `pypath.utils.uniprot` module is an API around UniProt protein datasheets. It is not suitable for bulk retrieval: that would work but take really long time. Calling its bulk methods with more than a few dozens or hundreds of proteins might take minutes, as it downloads protein datasheets one-by-one. To retrieve the full datasheets of one or more proteins use `query`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T17:57:18.978720Z",
     "start_time": "2022-12-02T17:57:18.147010Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<UniProt datasheet P00533 (EGFR)>,\n",
       " <UniProt datasheet O75385 (ULK1)>,\n",
       " <UniProt datasheet Q14457 (BECN1)>]"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.utils import uniprot\n",
    "uniprot.query('P00533', 'O75385', 'Q14457')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T17:57:58.735412Z",
     "start_time": "2022-12-02T17:57:58.727283Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<UniProt datasheet O75385 (ULK1)>"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ulk1 = uniprot.query('O75385')\n",
    "ulk1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Many attributes are available from the datasheet objects, just a few examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T17:59:18.446729Z",
     "start_time": "2022-12-02T17:59:18.438757Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(112631,\n",
       " 1050,\n",
       " 'Cytoplasm, cytosol. Preautophagosomal structure. Note=Under starvation conditions, is localized to puncate structures primarily representing the isolation membrane that sequesters a portion of the cytoplasm resulting in the formation of an autophagosome.',\n",
       " 'MEPGRGGTETVGKFEFSRKDLIGHGAFAVVFKGRHREKHDLEVAVKCINKKNLAKSQTLLGKEIKILKELKHENIVALYDFQEMANSVYLVMEYCNGGDLADYLHAMRTLSEDTIRLFLQQIAGAMRLLHSKGIIHRDLKPQNILLSNPAGRRANPNSIRVKIADFGFARYLQSNMMAATLCGSPMYMAPEVIMSQHYDGKADLWSIGTIVYQCLTGKAPFQASSPQDLRLFYEKNKTLVPTIPRETSAPLRQLLLALLQRNHKDRMDFDEFFHHPFLDASPSVRKSPPVPVPSYPSSGSGSSSSSSSTSHLASPPSLGEMQQLQKTLASPADTAGFLHSSRDSGGSKDSSCDTDDFVMVPAQFPGDLVAEAPSAKPPPDSLMCSGSSLVASAGLESHGRTPSPSPPCSSSPSPSGRAGPFSSSRCGASVPIPVPTQVQNYQRIERNLQSPTQFQTPRSSAIRRSGSTSPLGFARASPSPPAHAEHGGVLARKMSLGGGRPYTPSPQVGTIPERPGWSGTPSPQGAEMRGGRSPRPGSSAPEHSPRTSGLGCRLHSAPNLSDLHVVRPKLPKPPTDPLGAVFSPPQASPPQPSHGLQSCRNLRGSPKLPDFLQRNPLPPILGSPTKAVPSFDFPKTPSSQNLLALLARQGVVMTPPRNRTLPDLSEVGPFHGQPLGPGLRPGEDPKGPFGRSFSTSRLTDLLLKAAFGTQAPDPGSTESLQEK"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 1329 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ulk1.weight, ulk1.length, ulk1.subcellular_location, ulk1.sequence"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `collect` function collects certain features for a set of proteins.\n",
    "\n",
    "<div class=\"alert alert-block alert-warning\"><b>Warning:</b> This is a really inefficient way of retrieving data from UniProt. If you work with more than a handful of proteins, go for <em><a href=\"uniprot-data\">pypath.inputs.uniprot_data</a></em> instead.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T18:02:29.957514Z",
     "start_time": "2022-12-02T18:02:29.937820Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('ac', ['P00533', 'O75385', 'Q14457']),\n",
       "             ('weight', [134277, 112631, 51896]),\n",
       "             ('length', [1210, 1050, 450])])"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "uniprot.collect(['P00533', 'O75385', 'Q14457'], 'weight', 'length')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Tables\n",
    "\n",
    "UniProt data can be printed to the console in a tabular format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T18:07:18.462634Z",
     "start_time": "2022-12-02T18:07:18.443096Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╒═══════╤════════╤══════════╤══════════╕\n",
      "│   No. │ ac     │   weight │   length │\n",
      "╞═══════╪════════╪══════════╪══════════╡\n",
      "│     1 │ P00533 │   134277 │     1210 │\n",
      "├───────┼────────┼──────────┼──────────┤\n",
      "│     2 │ O75385 │   112631 │     1050 │\n",
      "├───────┼────────┼──────────┼──────────┤\n",
      "│     3 │ Q14457 │    51896 │      450 │\n",
      "╘═══════╧════════╧══════════╧══════════╛\n"
     ]
    }
   ],
   "source": [
    "uniprot.print_features(['P00533', 'O75385', 'Q14457'], 'weight', 'length')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a shortcut to print essential characterization of proteins as such a table. The `info` function is really useful if you get to a set of proteins at some point of your analysis and you want to quickly check what kind they are. To iterate through multiple groups of proteins, use `utils.uniprot.browse`. The columns and format of these tables can be customized by `kwargs`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T18:09:45.056825Z",
     "start_time": "2022-12-02T18:09:45.039305Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=====> [3 proteins] <=====\n",
      "╒═══════╤════════╤══════════════╤══════════╤══════════╤═════════════╤══════════════╤════════════╤══════════════╕\n",
      "│   No. │ ac     │ genesymbol   │   length │   weight │ full_name   │ function_o   │ keywords   │ subcellula   │\n",
      "│       │        │              │          │          │             │ r_genecard   │            │ r_location   │\n",
      "│       │        │              │          │          │             │ s            │            │              │\n",
      "╞═══════╪════════╪══════════════╪══════════╪══════════╪═════════════╪══════════════╪════════════╪══════════════╡\n",
      "│     1 │ P00533 │ EGFR         │     1210 │   134277 │ Epidermal   │ Receptor     │ 3D-        │ Cell         │\n",
      "│       │        │              │          │          │ growth      │ tyrosine     │ structure, │ membrane;    │\n",
      "│       │        │              │          │          │ factor      │ kinase       │ Alternativ │ Single-      │\n",
      "│       │        │              │          │          │ receptor    │"
     ]
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 20254 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "uniprot.info(['P00533', 'O75385', 'Q14457'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sanitizing UniProt IDs\n",
    "\n",
    "It is important to know that the ID translation module always do a number of checks when translating to UniProt IDs. Unless the `uniprot_cleanup` parameter is disabled. It translates secondary IDs to primary, attempts to map TrEMBL IDs to SwissProts by gene symbols, removes IDs of other organisms or invalid format. To exploit this behaviour it's enough to map from UniProt to UniProt:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T18:20:02.181656Z",
     "start_time": "2022-12-02T18:20:02.177475Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'O75385'}"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.utils import mapping\n",
    "mapping.map_name('Q9UQ28', 'uniprot', 'uniprot')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Enzyme-substrate interactions <a class=\"anchor\" id=\"enz-sub\"></a>\n",
    "\n",
    "The database is an instance of `pypath.core.enz_sub.EnzymeSubstrateAggregator` class. The database is built with the default or current configuration by the `core.enz_sub.get_db` method.\n",
    "\n",
    "<div class=\"alert alert-block alert-warning\"><b>Warning:</b> it is recommended to access databases <a href=\"#es-dbmanager\">by the manager</a>. Running the code below takes really long and does not save or reload the database, it builds a fresh copy each time.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:26:37.442882Z",
     "start_time": "2022-12-02T14:18:35.635700Z"
    }
   },
   "outputs": [],
   "source": [
    "from pypath.core import enz_sub\n",
    "es = enz_sub.get_db()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instead, let's acquire the database from the manager:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:37:33.078304Z",
     "start_time": "2022-12-03T15:37:25.808193Z"
    }
   },
   "outputs": [],
   "source": [
    "from pypath import omnipath\n",
    "es = omnipath.db.get_db('enz_sub')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The database itself is stored as a dictionary (`EnzymeSubstrateAggregator.enz_sub`) with pairs of proteins as keys and a list of special objects representing enzyme-substrate interactions as values. These can be accessed by pairs of labels, identifiers or `Entity` objects, e.g. mTOR phosphorylates AKT1:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:40:55.408662Z",
     "start_time": "2022-12-02T14:40:55.144764Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<MTOR => Residue AKT1-1:S473:phosphorylation [Evidences: HPRD, KEA, MIMP, PhosphoSite, ProtMapper, REACH, SIGNOR, Sparser, dbPTM, phosphoELM (15 references)]>,\n",
       " <MTOR => Residue AKT1-1:T450:phosphorylation [Evidences: HPRD, MIMP, PhosphoSite, ProtMapper, phosphoELM (0 references)]>,\n",
       " <MTOR => Residue AKT1-1:T308:phosphorylation [Evidences: ProtMapper, Sparser (1 references)]>]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "es[('MTOR', 'AKT1')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enzyme-substrate objects\n",
    "\n",
    "Let's take a closer look at one of the enzyme-PTM relationships, represented by `pypath.internals.intera.DomainMotif` objects. Below some of the attributes are shown:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:40:57.616453Z",
     "start_time": "2022-12-02T14:40:57.611744Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Entity: AKT1>,\n",
       " 'P31749',\n",
       " 1,\n",
       " <Residue AKT1-1:S473>,\n",
       " 'S',\n",
       " 473,\n",
       " 'phosphorylation',\n",
       " <Entity: MTOR>)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e_ptm = es[('MTOR', 'AKT1')][0]\n",
    "e_ptm.ptm.protein, e_ptm.ptm.protein.identifier, e_ptm.ptm.isoform, e_ptm.ptm.residue, e_ptm.ptm.residue.name, e_ptm.ptm.residue.number, e_ptm.ptm.typ, e_ptm.domain.protein"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The resources and references are available in `Evidences` objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:41:00.590338Z",
     "start_time": "2022-12-02T14:41:00.583559Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Evidences: HPRD, KEA, MIMP, PhosphoSite, ProtMapper, REACH, SIGNOR, Sparser, dbPTM, phosphoELM (15 references)>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e_ptm.evidences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:41:03.165879Z",
     "start_time": "2022-12-02T14:41:03.157644Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'KEA', 'MIMP', 'PhosphoSite', 'ProtMapper', 'SIGNOR', 'dbPTM'}"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e_ptm.evidences.get_resource_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T14:41:04.493144Z",
     "start_time": "2022-12-02T14:41:04.485845Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{<Reference: 14761976>,\n",
       " <Reference: 15047712>,\n",
       " <Reference: 15364915>,\n",
       " <Reference: 15718470>,\n",
       " <Reference: 15899889>,\n",
       " <Reference: 16221682>,\n",
       " <Reference: 17013611>,\n",
       " <Reference: 19844585>,\n",
       " <Reference: 20333297>,\n",
       " <Reference: 20489726>,\n",
       " <Reference: 21157483>,\n",
       " <Reference: 21592956>,\n",
       " <Reference: 23006971>,\n",
       " <Reference: 8978681>,\n",
       " <Reference: 9736715>}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e_ptm.evidences.get_references()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enzyme-substrate data frame\n",
    "\n",
    "The dabase object is able to export its contents into a `pandas.DataFrame`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:37:39.891782Z",
     "start_time": "2022-12-03T15:37:38.858761Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>enzyme</th>\n",
       "      <th>enzyme_genesymbol</th>\n",
       "      <th>substrate</th>\n",
       "      <th>substrate_genesymbol</th>\n",
       "      <th>isoforms</th>\n",
       "      <th>residue_type</th>\n",
       "      <th>residue_offset</th>\n",
       "      <th>modification</th>\n",
       "      <th>sources</th>\n",
       "      <th>references</th>\n",
       "      <th>curation_effort</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>P31749</td>\n",
       "      <td>AKT1</td>\n",
       "      <td>P63104</td>\n",
       "      <td>YWHAZ</td>\n",
       "      <td>1</td>\n",
       "      <td>S</td>\n",
       "      <td>58</td>\n",
       "      <td>phosphorylation</td>\n",
       "      <td>HPRD;HPRD_MIMP;KEA;MIMP;PhosphoSite;PhosphoSit...</td>\n",
       "      <td>HPRD:11956222;KEA:11956222;KEA:12861023;KEA:16...</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>P31749</td>\n",
       "      <td>AKT1</td>\n",
       "      <td>P63104</td>\n",
       "      <td>YWHAZ</td>\n",
       "      <td>1</td>\n",
       "      <td>S</td>\n",
       "      <td>184</td>\n",
       "      <td>phosphorylation</td>\n",
       "      <td>HPRD;HPRD_MIMP;KEA;MIMP;PhosphoSite_MIMP;phosp...</td>\n",
       "      <td>HPRD:11956222;KEA:11956222;KEA:15071501</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>P45983</td>\n",
       "      <td>MAPK8</td>\n",
       "      <td>P63104</td>\n",
       "      <td>YWHAZ</td>\n",
       "      <td>1</td>\n",
       "      <td>S</td>\n",
       "      <td>184</td>\n",
       "      <td>phosphorylation</td>\n",
       "      <td>HPRD;HPRD_MIMP;KEA;MIMP;PhosphoNetworks;Phosph...</td>\n",
       "      <td>HPRD:15696159;KEA:11956222;KEA:15071501;KEA:15...</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>P06493</td>\n",
       "      <td>CDK1</td>\n",
       "      <td>P11171</td>\n",
       "      <td>EPB41</td>\n",
       "      <td>1</td>\n",
       "      <td>S</td>\n",
       "      <td>712</td>\n",
       "      <td>phosphorylation</td>\n",
       "      <td>HPRD_MIMP;MIMP;PhosphoSite_MIMP;ProtMapper;REA...</td>\n",
       "      <td>ProtMapper:15525677;dbPTM:15525677;dbPTM:18220...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>P06493</td>\n",
       "      <td>CDK1</td>\n",
       "      <td>P11171</td>\n",
       "      <td>EPB41</td>\n",
       "      <td>1;2;5;7</td>\n",
       "      <td>T</td>\n",
       "      <td>60</td>\n",
       "      <td>phosphorylation</td>\n",
       "      <td>MIMP;PhosphoSite;PhosphoSite_MIMP;ProtMapper;R...</td>\n",
       "      <td>ProtMapper:15525677;dbPTM:15525677;dbPTM:2171679</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41421</th>\n",
       "      <td>P29597</td>\n",
       "      <td>TYK2</td>\n",
       "      <td>P51692</td>\n",
       "      <td>STAT5B</td>\n",
       "      <td>1</td>\n",
       "      <td>Y</td>\n",
       "      <td>699</td>\n",
       "      <td>phosphorylation</td>\n",
       "      <td>KEA</td>\n",
       "      <td>KEA:10830280;KEA:11751923;KEA:12411494</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41422</th>\n",
       "      <td>Q06418</td>\n",
       "      <td>TYRO3</td>\n",
       "      <td>P19174</td>\n",
       "      <td>PLCG1</td>\n",
       "      <td>1;2</td>\n",
       "      <td>Y</td>\n",
       "      <td>771</td>\n",
       "      <td>phosphorylation</td>\n",
       "      <td>KEA</td>\n",
       "      <td>KEA:12601080;KEA:15144186;KEA:15592455;KEA:160...</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41423</th>\n",
       "      <td>Q9H4A3</td>\n",
       "      <td>WNK1</td>\n",
       "      <td>Q8TAX0</td>\n",
       "      <td>OSR1</td>\n",
       "      <td>1</td>\n",
       "      <td>T</td>\n",
       "      <td>185</td>\n",
       "      <td>phosphorylation</td>\n",
       "      <td>KEA</td>\n",
       "      <td>KEA:18270262</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41424</th>\n",
       "      <td>Q9H4A3</td>\n",
       "      <td>WNK1</td>\n",
       "      <td>Q96J92</td>\n",
       "      <td>WNK4</td>\n",
       "      <td>1;3</td>\n",
       "      <td>S</td>\n",
       "      <td>335</td>\n",
       "      <td>phosphorylation</td>\n",
       "      <td>KEA</td>\n",
       "      <td>KEA:15883153</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41425</th>\n",
       "      <td>Q9NYL2</td>\n",
       "      <td>MAP3K20</td>\n",
       "      <td>Q92903</td>\n",
       "      <td>CDS1</td>\n",
       "      <td>1</td>\n",
       "      <td>T</td>\n",
       "      <td>68</td>\n",
       "      <td>phosphorylation</td>\n",
       "      <td>KEA</td>\n",
       "      <td>KEA:10973490</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>41426 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       enzyme enzyme_genesymbol substrate substrate_genesymbol isoforms  \\\n",
       "0      P31749              AKT1    P63104                YWHAZ        1   \n",
       "1      P31749              AKT1    P63104                YWHAZ        1   \n",
       "2      P45983             MAPK8    P63104                YWHAZ        1   \n",
       "3      P06493              CDK1    P11171                EPB41        1   \n",
       "4      P06493              CDK1    P11171                EPB41  1;2;5;7   \n",
       "...       ...               ...       ...                  ...      ...   \n",
       "41421  P29597              TYK2    P51692               STAT5B        1   \n",
       "41422  Q06418             TYRO3    P19174                PLCG1      1;2   \n",
       "41423  Q9H4A3              WNK1    Q8TAX0                 OSR1        1   \n",
       "41424  Q9H4A3              WNK1    Q96J92                 WNK4      1;3   \n",
       "41425  Q9NYL2           MAP3K20    Q92903                 CDS1        1   \n",
       "\n",
       "      residue_type  residue_offset     modification  \\\n",
       "0                S              58  phosphorylation   \n",
       "1                S             184  phosphorylation   \n",
       "2                S             184  phosphorylation   \n",
       "3                S             712  phosphorylation   \n",
       "4                T              60  phosphorylation   \n",
       "...            ...             ...              ...   \n",
       "41421            Y             699  phosphorylation   \n",
       "41422            Y             771  phosphorylation   \n",
       "41423            T             185  phosphorylation   \n",
       "41424            S             335  phosphorylation   \n",
       "41425            T              68  phosphorylation   \n",
       "\n",
       "                                                 sources  \\\n",
       "0      HPRD;HPRD_MIMP;KEA;MIMP;PhosphoSite;PhosphoSit...   \n",
       "1      HPRD;HPRD_MIMP;KEA;MIMP;PhosphoSite_MIMP;phosp...   \n",
       "2      HPRD;HPRD_MIMP;KEA;MIMP;PhosphoNetworks;Phosph...   \n",
       "3      HPRD_MIMP;MIMP;PhosphoSite_MIMP;ProtMapper;REA...   \n",
       "4      MIMP;PhosphoSite;PhosphoSite_MIMP;ProtMapper;R...   \n",
       "...                                                  ...   \n",
       "41421                                                KEA   \n",
       "41422                                                KEA   \n",
       "41423                                                KEA   \n",
       "41424                                                KEA   \n",
       "41425                                                KEA   \n",
       "\n",
       "                                              references  curation_effort  \n",
       "0      HPRD:11956222;KEA:11956222;KEA:12861023;KEA:16...               11  \n",
       "1                HPRD:11956222;KEA:11956222;KEA:15071501                3  \n",
       "2      HPRD:15696159;KEA:11956222;KEA:15071501;KEA:15...                9  \n",
       "3      ProtMapper:15525677;dbPTM:15525677;dbPTM:18220...                5  \n",
       "4       ProtMapper:15525677;dbPTM:15525677;dbPTM:2171679                3  \n",
       "...                                                  ...              ...  \n",
       "41421             KEA:10830280;KEA:11751923;KEA:12411494                3  \n",
       "41422  KEA:12601080;KEA:15144186;KEA:15592455;KEA:160...                8  \n",
       "41423                                       KEA:18270262                1  \n",
       "41424                                       KEA:15883153                1  \n",
       "41425                                       KEA:10973490                1  \n",
       "\n",
       "[41426 rows x 11 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "es.make_df()\n",
    "es.df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Protein sequences\n",
    "\n",
    "The APIs for sequences are very basic, because we've never really needed them; but the fundamentals are probably there to make a nice, powerful API. Still, I don't believe *pypath* will ever be strong in sequences, it's just not our main topic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T19:40:09.732079Z",
     "start_time": "2022-12-02T19:40:09.295287Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 19, 'TFIIRCLQWT')"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.utils import homology\n",
    "seqc = homology.SequenceContainer(preload_seq = [9606])\n",
    "akt1 = seqc.get_seq('P31749')\n",
    "akt1.get_region(start = 10, end = 19, isoform = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T19:44:52.083650Z",
     "start_time": "2022-12-02T19:44:51.992066Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'P63120': <pypath.utils.seq.Seq at 0x689900d45cc0>,\n",
       " 'Q96EC8': <pypath.utils.seq.Seq at 0x689908ea8f70>,\n",
       " 'Q6ZMS4': <pypath.utils.seq.Seq at 0x689908eaa4a0>,\n",
       " 'Q8N8L2': <pypath.utils.seq.Seq at 0x6899223538b0>,\n",
       " 'Q15916': <pypath.utils.seq.Seq at 0x689922353c70>,\n",
       " 'O60384': <pypath.utils.seq.Seq at 0x689922350730>,\n",
       " 'Q3MIS6': <pypath.utils.seq.Seq at 0x689922353310>,\n",
       " 'Q86UK7': <pypath.utils.seq.Seq at 0x689922353760>,\n",
       " 'Q6P280': <pypath.utils.seq.Seq at 0x689922353190>,\n",
       " 'Q969W1': <pypath.utils.seq.Seq at 0x689922350d90>,\n",
       " 'O14978': <pypath.utils.seq.Seq at 0x689922353220>,\n",
       " 'P61129': <pypath.utils.seq.Seq at 0x689922353370>,\n",
       " 'Q66K41': <pypath.utils.seq.Seq at 0x6899223534f0>,\n",
       " 'Q15937': <pypath.utils.seq.Seq at 0x689922350c70>,\n",
       " 'Q9P2J8': <pypath.utils.seq.Seq at 0x689922351450>,\n",
       " 'Q8ND82': <pypath.utils.seq.Seq at 0x689922353910>,\n",
       " 'Q9NP64': <pypath.utils.seq.Seq at 0x6899223502b0>,\n",
       " 'P98182': <pypath.utils.seq.Seq at 0x689922350280>,\n",
       " 'Q8IUH4': <pypath.utils.seq.Seq at 0x68992235"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 53045 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pypath.utils import seq\n",
    "human_proteome = seq.swissprot_seq()\n",
    "human_proteome"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T19:48:41.267941Z",
     "start_time": "2022-12-02T19:48:41.261611Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[SeqLookup(isoform=1, offset=625)]"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(human_proteome['P00533'].findall('YGCT'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Annotations <a class=\"anchor\" id=\"annotations\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This database provides various annotations about the function, structure, localization and many other properties of the proteins and genes. The database is an instance of `pypath.core.annot.AnnotationTable` class. The database is built with the default or current configuration by the `core.annot.get_db` method.\n",
    "\n",
    "<div class=\"alert alert-block alert-warning\"><b>Warning:</b> it is recommended to access databases <a href=\"#an-dbmanager\">by the manager</a>. Running the code below takes really long and does not save or reload the database, it builds a fresh copy each time.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:07:08.083875Z",
     "start_time": "2022-12-02T15:07:07.502326Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Annotation database: 3788067 records about 51636 entities from 78 resources>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.core import annot\n",
    "an = annot.get_db()\n",
    "an"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load a single annotation resource\n",
    "\n",
    "The annotations database is huge, on disk it takes up 1-2 GB of space, it consists of 60-70 resources. But all these resources are not integrated with each other, each can be loaded individually, by their dedicated classes in the `core.annot` module. This practice can be recommended and will be supported better in the future. Let's load one resource:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:38:57.042470Z",
     "start_time": "2022-12-03T15:38:08.786534Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<CPAD annotations: 2308 records about 1358 entities>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.core import annot\n",
    "cpad = annot.Cpad()\n",
    "cpad"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The resulted object is derived from the `AnnotationBase` class, its data is stored under the `annot` attribute, in a dict where identifiers are keys and sets of annotation records are the values. The keys of the records are shown by the `get_names` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:06:45.366916Z",
     "start_time": "2022-12-02T15:06:45.357658Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('regulator_type',\n",
       " 'effect_on_pathway',\n",
       " 'pathway',\n",
       " 'effect_on_cancer',\n",
       " 'effect_on_cancer_outcome',\n",
       " 'cancer',\n",
       " 'pathway_category')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cpad.get_names()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each name we can list the possible values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:06:47.363402Z",
     "start_time": "2022-12-02T15:06:47.355610Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Acute lymphoblastic leukemia (ALL) (precursor T lymphoblastic leukemia)',\n",
       " 'Acute myeloid leukemia (AML)',\n",
       " 'Basal cell carcinoma',\n",
       " 'Bladder cancer',\n",
       " 'Breast cancer',\n",
       " 'Cervical cancer',\n",
       " 'Cholangiocarcinoma',\n",
       " 'Choriocarcinoma',\n",
       " 'Chronic lymphocytic leukemia (CLL)',\n",
       " 'Chronic myeloid leukemia (CML)',\n",
       " 'Colorectal cancer',\n",
       " 'Endometrial cancer',\n",
       " 'Esophageal cancer',\n",
       " \"Ewing's sarcoma\",\n",
       " 'Gallbladder cancer',\n",
       " 'Gastric cancer',\n",
       " 'Glioma',\n",
       " 'Hepatocellular carcinoma',\n",
       " 'Hodgkin lymphoma',\n",
       " 'Infantile hemangioma',\n",
       " 'Laryngeal cancer',\n",
       " 'Malignant melanoma',\n",
       " 'Malignant pleural mesothelioma',\n",
       " 'Mantle cell lymphoma',\n",
       " 'Multiple myeloma',\n",
       " 'Nasopharyngeal cancer',\n",
       " 'Neuroblastoma',\n",
       " 'Non-small cell lung cancer',\n",
       " 'Oral cancer',\n",
       " 'Osteosarcoma',\n",
       " 'Ovarian cancer',\n",
       " 'Pancreatic cancer',\n",
       " 'Pituitary adenomas',\n",
       " 'Prostate cancer',\n",
       " 'Renal cell carcinoma',\n",
       " 'Small cell lung cancer',\n",
       " 'Squamous cell carcinoma',\n",
       " 'Synovial sarcoma',\n",
       " 'Testicular cancer',\n",
       " 'Thyroid cancer'}"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cpad.get_values('cancer')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on their annotations the `select` method filters the annotated molecules. For example, 78 complexes, miRNAs and proteins are annotated as inhibiting colorectal cancer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:06:50.326964Z",
     "start_time": "2022-12-02T15:06:50.318535Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A6NDV4',\n",
       " Complex: COMPLEX:O14745,\n",
       " Complex: COMPLEX:O14862,\n",
       " Complex: COMPLEX:O15169_P25054,\n",
       " Complex: COMPLEX:O94813,\n",
       " Complex: COMPLEX:O94953,\n",
       " Complex: COMPLEX:P00533,\n",
       " Complex: COMPLEX:P06733,\n",
       " Complex Glucose transporter complex 1: COMPLEX:P11166,\n",
       " Complex: COMPLEX:P25054,\n",
       " Complex: COMPLEX:P40261,\n",
       " Complex: COMPLEX:P49327,\n",
       " Complex: COMPLEX:P54687,\n",
       " Complex PTEN phosphatase complex: COMPLEX:P60484,\n",
       " Complex: COMPLEX:Q01973,\n",
       " Complex: COMPLEX:Q12888,\n",
       " Complex: COMPLEX:Q13620,\n",
       " Complex: COMPLEX:Q96CX2,\n",
       " Complex: COMPLEX:Q99558,\n",
       " 'MIMAT0000069',\n",
       " 'MIMAT0000089',\n",
       " 'MIMAT0000093',\n",
       " 'MIMAT0000262',\n",
       " 'MIMAT0000274',\n",
       " 'MIMAT0000422',\n",
       " 'MIMAT0000427',\n",
       " 'MIMAT0000437',\n",
       " 'MIMAT0000449',\n",
       " 'MIMAT0000455',\n",
       " 'MIMAT0000460',\n",
       " 'MIMAT0000461',\n",
       " 'MIMAT0000617',\n",
       " 'MIMAT0003266',\n",
       " 'MIMAT0003320',\n",
       " 'O14745',\n",
       " 'O14862',\n",
       " 'O15169',\n",
       " 'O75473',\n",
       " 'O75888',\n",
       " 'O76041',\n",
       " 'O94813',\n",
       " 'O94953',\n",
       " 'P00533',\n",
       " 'P06733',\n",
       " 'P06756',\n",
       " 'P11166',\n",
       " 'P13631',\n",
       " 'P22676',\n",
       " 'P25054',\n",
       " 'P25791',\n",
       " 'P40261',\n",
       " 'P49327',\n",
       " 'P546"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 1279 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cpad.select(cancer = 'Colorectal cancer', effect_on_cancer = 'Inhibiting')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load the full annotations database by the database manager\n",
    "\n",
    "Alternatively, the full annotations database can be accessed in the usual way:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Annotation database: 5490653 records about 50872 entities from 68 resources>"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "an = omnipath.db.get_db('annotations')\n",
    "an"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `AnnotationTable` object contains the resource specific annotation objects under the `annots` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:07:39.944846Z",
     "start_time": "2022-12-02T15:07:39.732216Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'CellTypist': <CellTypist annotations: 927 records about 473 entities>,\n",
       " 'Integrins': <Integrins annotations: 62 records about 62 entities>,\n",
       " 'CellCellInteractions': <CellCellInteractions annotations: 5544 records about 4960 entities>,\n",
       " 'PanglaoDB': <PanglaoDB annotations: 8479 records about 4813 entities>,\n",
       " 'Lambert2018': <Lambert2018 annotations: 3281 records about 3277 entities>,\n",
       " 'CancerSEA': <CancerSEA annotations: 2515 records about 1992 entities>,\n",
       " 'Phobius': <Phobius annotations: 35382 records about 35382 entities>,\n",
       " 'GO_Intercell': <GO_Intercell annotations: 48799 records about 18377 entities>,\n",
       " 'MatrixDB': <MatrixDB annotations: 18127 records about 15903 entities>,\n",
       " 'Surfaceome': <Surfaceome annotations: 3558 records about 3558 entities>,\n",
       " 'Matrisome': <Matrisome annotations: 1514 records about 1514 entities>,\n",
       " 'HPA_secretome': <HPA_secretome annotations: 3568 records about 3568 entities>,\n",
       " 'HPMR': <HPMR annotations: 1748 records about 1695 entities>,\n",
       " 'CPAD': <CPAD annotati"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 5842 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "an.annots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each of these you can query the names of the fields, their possible values and the set of proteins annotated with any combination of the values, just like for CPAD above. As another exemple, let's take a look into the Matrisome database:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:07:45.418110Z",
     "start_time": "2022-12-02T15:07:45.411857Z"
    }
   },
   "outputs": [],
   "source": [
    "matrisome = an.annots['Matrisome']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:07:49.460328Z",
     "start_time": "2022-12-02T15:07:49.450474Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('mainclass', 'subclass', 'subsubclass')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrisome.get_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:07:53.409272Z",
     "start_time": "2022-12-02T15:07:53.403049Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Collagens',\n",
       " 'ECM Glycoproteins',\n",
       " 'ECM Regulators',\n",
       " 'ECM-affiliated Proteins',\n",
       " 'Proteoglycans',\n",
       " 'Secreted Factors',\n",
       " 'n/a'}"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrisome.get_values('subclass')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:07:56.776774Z",
     "start_time": "2022-12-02T15:07:56.762585Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A6NMZ7',\n",
       " 'A8TX70',\n",
       " 'B4DZ39',\n",
       " Complex Collagen type I homotrimer: COMPLEX:P02452,\n",
       " Complex HT_DM_Cluster278: COMPLEX:P02452_P02462_P08572_P29400_P53420_Q01955_Q02388_Q14031_Q17RW2_Q8NFW1,\n",
       " Complex Collagen type I trimer: COMPLEX:P02452_P08123,\n",
       " Complex Collagen type II trimer: COMPLEX:P02458,\n",
       " Complex Collagen type XI trimer variant 1: COMPLEX:P02458_P12107_P13942,\n",
       " Complex: COMPLEX:P02458_P20908_P25067,\n",
       " Complex: COMPLEX:P02458_P20908_P25067_P29400,\n",
       " Complex: COMPLEX:P02458_P25067_P29400,\n",
       " Complex Collagen type III trimer: COMPLEX:P02461,\n",
       " Complex: COMPLEX:P02462,\n",
       " Complex Collagen type IV trimer variant 1: COMPLEX:P02462_P08572,\n",
       " Complex Collagen type XI trimer variant 2: COMPLEX:P05997_P12107,\n",
       " Complex Collagen type XI trimer variant 3: COMPLEX:P05997_P12107_P20908,\n",
       " Complex Collagen type V trimer variant 1: COMPLEX:P05997_P20908,\n",
       " Complex Collagen type V trimer variant 2: COMPLEX:P05997_P20908_P25940,\n",
       " Complex: COMPLEX:P08572,\n",
       " Complex: COMPLEX:P12109_P12110,\n",
       " Complex Collagen "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 3072 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "matrisome.get_subset(subclass = 'Collagens')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load only selected annotations\n",
    "\n",
    "Another option is to load only certain annotation resources into an `AnnotationTable` object. We refer to the resources by class names. For example, if you only want to load the pathway membership annotations from SIGNOR, SignaLink, NetPath and KEGG, you can provide the names of the appropriate classes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:09:48.261323Z",
     "start_time": "2022-12-02T15:09:36.190127Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Annotation database: 28745 records about 6762 entities from 4 resources>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pathways = annot.AnnotationTable(\n",
    "    protein_sources = (\n",
    "        'SignalinkPathways',\n",
    "        'KeggPathways',\n",
    "        'NetpathPathways',\n",
    "        'SignorPathways',\n",
    "    ),\n",
    "    complex_sources = (),\n",
    ")\n",
    "pathways"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `AnnotationTable` object provides methods to query all resources together, or build a boolean array out of them. To see all annotations of one protein:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:10:17.758769Z",
     "start_time": "2022-12-02T15:10:17.754186Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[SignalinkPathway(pathway='Receptor tyrosine kinase'),\n",
       " SignalinkPathway(pathway='JAK/STAT'),\n",
       " KeggPathway(pathway='Proteoglycans in cancer'),\n",
       " KeggPathway(pathway='Regulation of actin cytoskeleton'),\n",
       " KeggPathway(pathway='Oxytocin signaling pathway'),\n",
       " KeggPathway(pathway='Phospholipase D signaling pathway'),\n",
       " KeggPathway(pathway='Pathways in cancer'),\n",
       " KeggPathway(pathway='Hepatocellular carcinoma'),\n",
       " KeggPathway(pathway='Colorectal cancer'),\n",
       " KeggPathway(pathway='Melanoma'),\n",
       " KeggPathway(pathway='EGFR tyrosine kinase inhibitor resistance'),\n",
       " KeggPathway(pathway='Human papillomavirus infection'),\n",
       " KeggPathway(pathway='Pancreatic cancer'),\n",
       " KeggPathway(pathway='Non-small cell lung cancer'),\n",
       " KeggPathway(pathway='Central carbon metabolism in cancer'),\n",
       " KeggPathway(pathway='Endocytosis'),\n",
       " KeggPathway(pathway='Endometrial cancer'),\n",
       " KeggPathway(pathway='Choline metabolism in cancer'),\n",
       " KeggPathway(pathway='Bladder cancer'),\n",
       " KeggPathway(pathway='Parathyroid hormone synthesis, secretion "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 2540 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pathways.all_annotations('P00533')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data frames of annotations\n",
    "\n",
    "Data from annotation objects can be exported to a `pandas.DataFrame`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:40:14.297643Z",
     "start_time": "2022-12-03T15:40:14.201860Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uniprot</th>\n",
       "      <th>genesymbol</th>\n",
       "      <th>entity_type</th>\n",
       "      <th>source</th>\n",
       "      <th>label</th>\n",
       "      <th>value</th>\n",
       "      <th>record_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Q16181</td>\n",
       "      <td>SEPT7</td>\n",
       "      <td>protein</td>\n",
       "      <td>CPAD</td>\n",
       "      <td>regulator_type</td>\n",
       "      <td>protein</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Q16181</td>\n",
       "      <td>SEPT7</td>\n",
       "      <td>protein</td>\n",
       "      <td>CPAD</td>\n",
       "      <td>effect_on_pathway</td>\n",
       "      <td>Upregulation</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Q16181</td>\n",
       "      <td>SEPT7</td>\n",
       "      <td>protein</td>\n",
       "      <td>CPAD</td>\n",
       "      <td>pathway</td>\n",
       "      <td>Actin cytoskeleton pathway</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Q16181</td>\n",
       "      <td>SEPT7</td>\n",
       "      <td>protein</td>\n",
       "      <td>CPAD</td>\n",
       "      <td>effect_on_cancer</td>\n",
       "      <td>Inhibiting</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Q16181</td>\n",
       "      <td>SEPT7</td>\n",
       "      <td>protein</td>\n",
       "      <td>CPAD</td>\n",
       "      <td>effect_on_cancer_outcome</td>\n",
       "      <td>inhibit glioma cell migration</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14396</th>\n",
       "      <td>COMPLEX:P30990</td>\n",
       "      <td>COMPLEX:NTS</td>\n",
       "      <td>complex</td>\n",
       "      <td>CPAD</td>\n",
       "      <td>cancer</td>\n",
       "      <td>Hepatocellular carcinoma</td>\n",
       "      <td>2306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14397</th>\n",
       "      <td>COMPLEX:P30990</td>\n",
       "      <td>COMPLEX:NTS</td>\n",
       "      <td>complex</td>\n",
       "      <td>CPAD</td>\n",
       "      <td>effect_on_pathway</td>\n",
       "      <td>Upregulation</td>\n",
       "      <td>2307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14398</th>\n",
       "      <td>COMPLEX:P30990</td>\n",
       "      <td>COMPLEX:NTS</td>\n",
       "      <td>complex</td>\n",
       "      <td>CPAD</td>\n",
       "      <td>pathway</td>\n",
       "      <td>ERK signaling pathway</td>\n",
       "      <td>2307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14399</th>\n",
       "      <td>COMPLEX:P30990</td>\n",
       "      <td>COMPLEX:NTS</td>\n",
       "      <td>complex</td>\n",
       "      <td>CPAD</td>\n",
       "      <td>effect_on_cancer</td>\n",
       "      <td>Activating</td>\n",
       "      <td>2307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14400</th>\n",
       "      <td>COMPLEX:P30990</td>\n",
       "      <td>COMPLEX:NTS</td>\n",
       "      <td>complex</td>\n",
       "      <td>CPAD</td>\n",
       "      <td>cancer</td>\n",
       "      <td>Gastric cancer</td>\n",
       "      <td>2307</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14401 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              uniprot   genesymbol entity_type source  \\\n",
       "0              Q16181        SEPT7     protein   CPAD   \n",
       "1              Q16181        SEPT7     protein   CPAD   \n",
       "2              Q16181        SEPT7     protein   CPAD   \n",
       "3              Q16181        SEPT7     protein   CPAD   \n",
       "4              Q16181        SEPT7     protein   CPAD   \n",
       "...               ...          ...         ...    ...   \n",
       "14396  COMPLEX:P30990  COMPLEX:NTS     complex   CPAD   \n",
       "14397  COMPLEX:P30990  COMPLEX:NTS     complex   CPAD   \n",
       "14398  COMPLEX:P30990  COMPLEX:NTS     complex   CPAD   \n",
       "14399  COMPLEX:P30990  COMPLEX:NTS     complex   CPAD   \n",
       "14400  COMPLEX:P30990  COMPLEX:NTS     complex   CPAD   \n",
       "\n",
       "                          label                          value  record_id  \n",
       "0                regulator_type                        protein          0  \n",
       "1             effect_on_pathway                   Upregulation          0  \n",
       "2                       pathway     Actin cytoskeleton pathway          0  \n",
       "3              effect_on_cancer                     Inhibiting          0  \n",
       "4      effect_on_cancer_outcome  inhibit glioma cell migration          0  \n",
       "...                         ...                            ...        ...  \n",
       "14396                    cancer       Hepatocellular carcinoma       2306  \n",
       "14397         effect_on_pathway                   Upregulation       2307  \n",
       "14398                   pathway          ERK signaling pathway       2307  \n",
       "14399          effect_on_cancer                     Activating       2307  \n",
       "14400                    cancer                 Gastric cancer       2307  \n",
       "\n",
       "[14401 rows x 7 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cpad.make_df()\n",
    "cpad.df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data frame has a long format. It can be converted to the more conventional wide format using standard `pandas` procedures (well, in tidyverse you would simply call `tidyr::pivot_wider`, in `pandas` you have to do an unintuitive sequence of 6 calls):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:40:19.182603Z",
     "start_time": "2022-12-03T15:40:19.153975Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>label</th>\n",
       "      <th>uniprot</th>\n",
       "      <th>genesymbol</th>\n",
       "      <th>entity_type</th>\n",
       "      <th>cancer</th>\n",
       "      <th>effect_on_cancer</th>\n",
       "      <th>effect_on_cancer_outcome</th>\n",
       "      <th>effect_on_pathway</th>\n",
       "      <th>pathway</th>\n",
       "      <th>pathway_category</th>\n",
       "      <th>regulator_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Q16181</td>\n",
       "      <td>SEPT7</td>\n",
       "      <td>protein</td>\n",
       "      <td>Glioma</td>\n",
       "      <td>Inhibiting</td>\n",
       "      <td>inhibit glioma cell migration</td>\n",
       "      <td>Upregulation</td>\n",
       "      <td>Actin cytoskeleton pathway</td>\n",
       "      <td>Regulation of actin cytoskeleton</td>\n",
       "      <td>protein</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MIMAT0000431</td>\n",
       "      <td>hsa-miR-140</td>\n",
       "      <td>mirna</td>\n",
       "      <td>Squamous cell carcinoma</td>\n",
       "      <td>Inhibiting</td>\n",
       "      <td>suppress tumor cell migration and invasion</td>\n",
       "      <td>Upregulation</td>\n",
       "      <td>ADAM10 mediated Notch1 signaling pathway</td>\n",
       "      <td>Notch signaling pathway</td>\n",
       "      <td>mirna</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MIMAT0005886</td>\n",
       "      <td>hsa-miR-1297</td>\n",
       "      <td>mirna</td>\n",
       "      <td>Prostate cancer</td>\n",
       "      <td>Inhibiting</td>\n",
       "      <td>inhibit proliferation and invasion</td>\n",
       "      <td>Upregulation</td>\n",
       "      <td>AEG1/Wnt signaling pathway</td>\n",
       "      <td>Wnt signaling pathway</td>\n",
       "      <td>mirna</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Q9UP65</td>\n",
       "      <td>PLA2G4C</td>\n",
       "      <td>protein</td>\n",
       "      <td>Breast cancer</td>\n",
       "      <td>Inhibiting</td>\n",
       "      <td>inhibit EGF-induced chemotaxis</td>\n",
       "      <td>Downregulation</td>\n",
       "      <td>Akt signaling pathway</td>\n",
       "      <td>PI3K-Akt signaling pathway</td>\n",
       "      <td>protein</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Q92600</td>\n",
       "      <td>CNOT9</td>\n",
       "      <td>protein</td>\n",
       "      <td>Breast cancer</td>\n",
       "      <td>Inhibiting</td>\n",
       "      <td>suppress cell proliferation</td>\n",
       "      <td>Downregulation</td>\n",
       "      <td>Akt signaling pathway</td>\n",
       "      <td>PI3K-Akt signaling pathway</td>\n",
       "      <td>protein</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2303</th>\n",
       "      <td>COMPLEX:P16422</td>\n",
       "      <td>COMPLEX:EPCAM</td>\n",
       "      <td>complex</td>\n",
       "      <td>Prostate cancer</td>\n",
       "      <td>Inhibiting</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Downregulation</td>\n",
       "      <td>PI3K-Akt-mTOR signaling pathway</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2304</th>\n",
       "      <td>COMPLEX:Q9Y6Y0</td>\n",
       "      <td>COMPLEX:IVNS1ABP</td>\n",
       "      <td>complex</td>\n",
       "      <td>Prostate cancer</td>\n",
       "      <td>Inhibiting</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Upregulation</td>\n",
       "      <td>Akt signaling pathway</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2305</th>\n",
       "      <td>COMPLEX:Q96CX2</td>\n",
       "      <td>COMPLEX:KCTD12</td>\n",
       "      <td>complex</td>\n",
       "      <td>Colorectal cancer</td>\n",
       "      <td>Inhibiting</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Upregulation</td>\n",
       "      <td>ERK signaling pathway</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2306</th>\n",
       "      <td>COMPLEX:P30990</td>\n",
       "      <td>COMPLEX:NTS</td>\n",
       "      <td>complex</td>\n",
       "      <td>Hepatocellular carcinoma</td>\n",
       "      <td>Activating</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Upregulation</td>\n",
       "      <td>Wnt/beta-catenin signaling pathway</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2307</th>\n",
       "      <td>COMPLEX:P30990</td>\n",
       "      <td>COMPLEX:NTS</td>\n",
       "      <td>complex</td>\n",
       "      <td>Gastric cancer</td>\n",
       "      <td>Activating</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Upregulation</td>\n",
       "      <td>ERK signaling pathway</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2308 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "label         uniprot        genesymbol entity_type                    cancer  \\\n",
       "0              Q16181             SEPT7     protein                    Glioma   \n",
       "1        MIMAT0000431       hsa-miR-140       mirna   Squamous cell carcinoma   \n",
       "2        MIMAT0005886      hsa-miR-1297       mirna           Prostate cancer   \n",
       "3              Q9UP65           PLA2G4C     protein             Breast cancer   \n",
       "4              Q92600             CNOT9     protein             Breast cancer   \n",
       "...               ...               ...         ...                       ...   \n",
       "2303   COMPLEX:P16422     COMPLEX:EPCAM     complex           Prostate cancer   \n",
       "2304   COMPLEX:Q9Y6Y0  COMPLEX:IVNS1ABP     complex           Prostate cancer   \n",
       "2305   COMPLEX:Q96CX2    COMPLEX:KCTD12     complex         Colorectal cancer   \n",
       "2306   COMPLEX:P30990       COMPLEX:NTS     complex  Hepatocellular carcinoma   \n",
       "2307   COMPLEX:P30990       COMPLEX:NTS     complex            Gastric cancer   \n",
       "\n",
       "label effect_on_cancer                    effect_on_cancer_outcome  \\\n",
       "0           Inhibiting               inhibit glioma cell migration   \n",
       "1           Inhibiting  suppress tumor cell migration and invasion   \n",
       "2           Inhibiting          inhibit proliferation and invasion   \n",
       "3           Inhibiting              inhibit EGF-induced chemotaxis   \n",
       "4           Inhibiting                 suppress cell proliferation   \n",
       "...                ...                                         ...   \n",
       "2303        Inhibiting                                         NaN   \n",
       "2304        Inhibiting                                         NaN   \n",
       "2305        Inhibiting                                         NaN   \n",
       "2306        Activating                                         NaN   \n",
       "2307        Activating                                         NaN   \n",
       "\n",
       "label effect_on_pathway                                   pathway  \\\n",
       "0          Upregulation                Actin cytoskeleton pathway   \n",
       "1          Upregulation  ADAM10 mediated Notch1 signaling pathway   \n",
       "2          Upregulation                AEG1/Wnt signaling pathway   \n",
       "3        Downregulation                     Akt signaling pathway   \n",
       "4        Downregulation                     Akt signaling pathway   \n",
       "...                 ...                                       ...   \n",
       "2303     Downregulation           PI3K-Akt-mTOR signaling pathway   \n",
       "2304       Upregulation                     Akt signaling pathway   \n",
       "2305       Upregulation                     ERK signaling pathway   \n",
       "2306       Upregulation        Wnt/beta-catenin signaling pathway   \n",
       "2307       Upregulation                     ERK signaling pathway   \n",
       "\n",
       "label                  pathway_category regulator_type  \n",
       "0      Regulation of actin cytoskeleton        protein  \n",
       "1               Notch signaling pathway          mirna  \n",
       "2                 Wnt signaling pathway          mirna  \n",
       "3            PI3K-Akt signaling pathway        protein  \n",
       "4            PI3K-Akt signaling pathway        protein  \n",
       "...                                 ...            ...  \n",
       "2303                                NaN            NaN  \n",
       "2304                                NaN            NaN  \n",
       "2305                                NaN            NaN  \n",
       "2306                                NaN            NaN  \n",
       "2307                                NaN            NaN  \n",
       "\n",
       "[2308 rows x 10 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index_cols = ['record_id', 'uniprot', 'genesymbol', 'label', 'entity_type']\n",
    "\n",
    "(\n",
    "    cpad.df.drop('source', axis=1).\n",
    "    set_index(index_cols).\n",
    "    unstack('label').\n",
    "    droplevel(axis=1, level=0).\n",
    "    reset_index().\n",
    "    drop('record_id', axis=1)\n",
    ")   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inter-cellular signaling roles <a class=\"anchor\" id=\"intercell\"></a>\n",
    "\n",
    "`pypath` does not combine the annotations in the `annot` module, exactly what goes in goes out. For example, WNT pathway from Signor and SignaLink won't be merged automatically. However with the `pypath.core.annot.CustomAnnotation` class anyone can do it. For inter-cellular communication categories the `pypath.core.intercell` module combines the data from all the relevant resources and creates categories based on a combination of evidences. The database is an instance of the `IntercellAnnotation` object, and the build is executed by the `pypath.core.intercell.get_db` function.\n",
    "\n",
    "<div class=\"alert alert-block alert-warning\"><b>Warning:</b> it is recommended to access databases <a href=\"#ic-dbmanager\">by the manager</a>. Running the code below takes really long and does not save or reload the database, it builds a fresh copy each time.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:13:03.593954Z",
     "start_time": "2022-12-02T15:13:03.336236Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Intercell annotations: 310033 records about 43617 entities>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.core import intercell\n",
    "ic = intercell.get_db() # this takes quite some time\n",
    "                       # unless you load annotations from a pickle cache\n",
    "ic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:43:27.834408Z",
     "start_time": "2022-12-03T15:40:32.368198Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Intercell annotations: 301527 records about 48570 entities>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath import omnipath\n",
    "ic = omnipath.db.get_db('intercell')\n",
    "ic"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This object stores its data under the `classes` attribute. Classes are defined in `pypath.core.intercell_annot.annot_combined_classes`. In addition, we manually revised and excluded some proteins from the more generic classes, these are listed in `pypath.core.intercell_annot.excludes`. Each class has the following properties:\n",
    "\n",
    "- `name`: all lowercase, human understandable name, without repeating the parent class (e.g. *WNT receptor*s will be simply *wnt*, and the parent class will be *receptor*)\n",
    "- `parent`: for a *specific* class the parent is the *generic* category it belongs to; for generic classes the `name` and `parent` are the same\n",
    "- `resource`: the resource the data comes from, or *OmniPath* for composite classes (combined from multiple resources)\n",
    "- `scope`: *specific* or *generic*; e.g. *TGF ligand* is specific, *ligand* is generic\n",
    "- `aspect`: *locational* (e.g. *plasma membrane*) or *functional* (e.g. *transporter*)\n",
    "\n",
    "Read more about the design of the intercell database [in our paper](https://www.embopress.org/doi/full/10.15252/msb.20209923)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:16:54.631309Z",
     "start_time": "2022-12-02T15:16:54.600885Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{AnnotDefKey(name='transmembrane', parent='transmembrane', resource='UniProt_location'): <AnnotationGroup `transmembrane` from UniProt_location, 5150 elements>,\n",
       " AnnotDefKey(name='transmembrane', parent='transmembrane', resource='UniProt_topology'): <AnnotationGroup `transmembrane` from UniProt_topology, 5760 elements>,\n",
       " AnnotDefKey(name='transmembrane', parent='transmembrane', resource='UniProt_keyword'): <AnnotationGroup `transmembrane` from UniProt_keyword, 7041 elements>,\n",
       " AnnotDefKey(name='transmembrane', parent='transmembrane_predicted', resource='Phobius'): <AnnotationGroup `transmembrane` from Phobius, 6444 elements>,\n",
       " AnnotDefKey(name='transmembrane_phobius', parent='transmembrane_predicted', resource='Almen2009'): <AnnotationGroup `transmembrane_phobius` from Almen2009, 2072 elements>,\n",
       " AnnotDefKey(name='transmembrane_sosui', parent='transmembrane_predicted', resource='Almen2009'): <AnnotationGroup `transmembrane_sosui` from Almen2009, 1663 elements>,\n",
       " AnnotDefKey(name='trans"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 143945 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ic.classes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An easy way to access the classes is the `select` method. The `AnnotationGroup` objects behave as plain Python `set`s, and besides that, they feature many further attributes and methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:17:00.542493Z",
     "start_time": "2022-12-02T15:17:00.536417Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AnnotationGroup `gaba` from HGNC, 40 elements>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gaba_receptors = ic.select('gaba', parent = 'receptor')\n",
    "gaba_receptors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:17:02.764333Z",
     "start_time": "2022-12-02T15:17:02.754080Z"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A8MPY1',\n",
       " Complex GABA-A receptor (GABRA1, GABRB2, GABRD): COMPLEX:O14764_P14867_P47870,\n",
       " Complex GABA-A receptor, alpha-4/beta-3/delta: COMPLEX:O14764_P28472_P48169,\n",
       " Complex GABA-A receptor, alpha-6/beta-3/delta: COMPLEX:O14764_P28472_Q16445,\n",
       " Complex GABA-A receptor, alpha-4/beta-2/delta: COMPLEX:O14764_P47870_P48169,\n",
       " Complex GABA-A receptor, alpha-6/beta-2/delta: COMPLEX:O14764_P47870_Q16445,\n",
       " Complex GABBR1-GABBR2 complex: COMPLEX:O75899_Q9UBS5,\n",
       " Complex: COMPLEX:P14867,\n",
       " Complex GABA-A receptor, alpha-1/beta-3/gamma-2: COMPLEX:P14867_P18507_P28472,\n",
       " Complex GABA-A receptor (GABRA1, GABRB2, GABRG2): COMPLEX:P14867_P18507_P47870,\n",
       " Complex GABA-A receptor, alpha-5/beta-3/gamma-2: COMPLEX:P18507_P28472_P31644,\n",
       " Complex GABA-A receptor, alpha-3/beta-3/gamma-2: COMPLEX:P18507_P28472_P34903,\n",
       " Complex GABA-A receptor, alpha-2/beta-3/gamma-2: COMPLEX:P18507_P28472_P47869,\n",
       " Complex GABA-A receptor, alpha-6/beta-3/gamma-2: COMPLEX:P18507_P28472_Q16445,\n",
       " Complex: COMPLEX:P18507_Q8N1C3,\n",
       " C"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 1368 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gaba_receptors.members"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Build an intercellular communication network\n",
    "\n",
    "The intercell database can be connected to a `Network` object to create an intercellular communication network:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:17:08.247230Z",
     "start_time": "2022-12-02T15:17:08.243923Z"
    }
   },
   "outputs": [],
   "source": [
    "cu = omnipath.db.get_db('curated')\n",
    "ic.register_network(cu)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Quantitative overview of intercell annotations\n",
    "\n",
    "A data frame with basic statistics is available:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:45:17.978114Z",
     "start_time": "2022-12-03T15:45:17.681491Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category</th>\n",
       "      <th>parent</th>\n",
       "      <th>database</th>\n",
       "      <th>scope</th>\n",
       "      <th>aspect</th>\n",
       "      <th>source</th>\n",
       "      <th>consensus_score</th>\n",
       "      <th>transmitter</th>\n",
       "      <th>receiver</th>\n",
       "      <th>secreted</th>\n",
       "      <th>plasma_membrane_transmembrane</th>\n",
       "      <th>plasma_membrane_peripheral</th>\n",
       "      <th>n_uniprot</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>6</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>5150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_topology</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>6</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>5760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_keyword</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>7041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane_predicted</td>\n",
       "      <td>Phobius</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>6444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>transmembrane_phobius</td>\n",
       "      <td>transmembrane_predicted</td>\n",
       "      <td>Almen2009</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>2072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1120</th>\n",
       "      <td>parin_adhesion_regulator</td>\n",
       "      <td>intracellular_intercellular_related</td>\n",
       "      <td>HGNC</td>\n",
       "      <td>specific</td>\n",
       "      <td>functional</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1121</th>\n",
       "      <td>plakophilin_adhesion_regulator</td>\n",
       "      <td>intracellular_intercellular_related</td>\n",
       "      <td>HGNC</td>\n",
       "      <td>specific</td>\n",
       "      <td>functional</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1122</th>\n",
       "      <td>actin_regulation_adhesome</td>\n",
       "      <td>intracellular_intercellular_related</td>\n",
       "      <td>Adhesome</td>\n",
       "      <td>specific</td>\n",
       "      <td>functional</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1123</th>\n",
       "      <td>adhesion_cytoskeleton_adaptor</td>\n",
       "      <td>intracellular_intercellular_related</td>\n",
       "      <td>Adhesome</td>\n",
       "      <td>specific</td>\n",
       "      <td>functional</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1124</th>\n",
       "      <td>intracellular_intercellular_related</td>\n",
       "      <td>intracellular_intercellular_related</td>\n",
       "      <td>OmniPath</td>\n",
       "      <td>generic</td>\n",
       "      <td>functional</td>\n",
       "      <td>composite</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>291</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1125 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 category  \\\n",
       "0                           transmembrane   \n",
       "1                           transmembrane   \n",
       "2                           transmembrane   \n",
       "3                           transmembrane   \n",
       "4                   transmembrane_phobius   \n",
       "...                                   ...   \n",
       "1120             parin_adhesion_regulator   \n",
       "1121       plakophilin_adhesion_regulator   \n",
       "1122            actin_regulation_adhesome   \n",
       "1123        adhesion_cytoskeleton_adaptor   \n",
       "1124  intracellular_intercellular_related   \n",
       "\n",
       "                                   parent          database     scope  \\\n",
       "0                           transmembrane  UniProt_location   generic   \n",
       "1                           transmembrane  UniProt_topology   generic   \n",
       "2                           transmembrane   UniProt_keyword   generic   \n",
       "3                 transmembrane_predicted           Phobius   generic   \n",
       "4                 transmembrane_predicted         Almen2009   generic   \n",
       "...                                   ...               ...       ...   \n",
       "1120  intracellular_intercellular_related              HGNC  specific   \n",
       "1121  intracellular_intercellular_related              HGNC  specific   \n",
       "1122  intracellular_intercellular_related          Adhesome  specific   \n",
       "1123  intracellular_intercellular_related          Adhesome  specific   \n",
       "1124  intracellular_intercellular_related          OmniPath   generic   \n",
       "\n",
       "          aspect             source  consensus_score  transmitter  receiver  \\\n",
       "0     locational  resource_specific                6        False     False   \n",
       "1     locational  resource_specific                6        False     False   \n",
       "2     locational  resource_specific                1        False     False   \n",
       "3     locational  resource_specific                1        False     False   \n",
       "4     locational  resource_specific                0        False     False   \n",
       "...          ...                ...              ...          ...       ...   \n",
       "1120  functional  resource_specific                0         True     False   \n",
       "1121  functional  resource_specific                0         True     False   \n",
       "1122  functional  resource_specific                0         True     False   \n",
       "1123  functional  resource_specific                0         True     False   \n",
       "1124  functional          composite                0         True     False   \n",
       "\n",
       "      secreted  plasma_membrane_transmembrane  plasma_membrane_peripheral  \\\n",
       "0        False                           True                       False   \n",
       "1        False                           True                       False   \n",
       "2        False                          False                       False   \n",
       "3        False                          False                       False   \n",
       "4        False                           True                       False   \n",
       "...        ...                            ...                         ...   \n",
       "1120     False                          False                       False   \n",
       "1121     False                          False                       False   \n",
       "1122     False                          False                       False   \n",
       "1123     False                          False                       False   \n",
       "1124     False                          False                       False   \n",
       "\n",
       "      n_uniprot  \n",
       "0          5150  \n",
       "1          5760  \n",
       "2          7041  \n",
       "3          6444  \n",
       "4          2072  \n",
       "...         ...  \n",
       "1120          5  \n",
       "1121          3  \n",
       "1122         22  \n",
       "1123        118  \n",
       "1124        291  \n",
       "\n",
       "[1125 rows x 13 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ic.counts_df()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Intercell database as data frame\n",
    "\n",
    "Just like the other databases, the object can be exported into a `pandas.DataFrame`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:45:46.897012Z",
     "start_time": "2022-12-03T15:45:24.178357Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category</th>\n",
       "      <th>parent</th>\n",
       "      <th>database</th>\n",
       "      <th>scope</th>\n",
       "      <th>aspect</th>\n",
       "      <th>source</th>\n",
       "      <th>uniprot</th>\n",
       "      <th>genesymbol</th>\n",
       "      <th>entity_type</th>\n",
       "      <th>consensus_score</th>\n",
       "      <th>transmitter</th>\n",
       "      <th>receiver</th>\n",
       "      <th>secreted</th>\n",
       "      <th>plasma_membrane_transmembrane</th>\n",
       "      <th>plasma_membrane_peripheral</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>Q96JP9</td>\n",
       "      <td>CDHR1</td>\n",
       "      <td>protein</td>\n",
       "      <td>6</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>Q9P126</td>\n",
       "      <td>CLEC1B</td>\n",
       "      <td>protein</td>\n",
       "      <td>8</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>Q13585</td>\n",
       "      <td>GPR50</td>\n",
       "      <td>protein</td>\n",
       "      <td>6</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>Q8N9I0</td>\n",
       "      <td>SYT2</td>\n",
       "      <td>protein</td>\n",
       "      <td>7</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>O43614</td>\n",
       "      <td>HCRTR2</td>\n",
       "      <td>protein</td>\n",
       "      <td>6</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>A6NJY1</td>\n",
       "      <td>SLC9B1P1</td>\n",
       "      <td>protein</td>\n",
       "      <td>4</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>Q5RI15</td>\n",
       "      <td>COX20</td>\n",
       "      <td>protein</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>Q13948</td>\n",
       "      <td>CUX1</td>\n",
       "      <td>protein</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>Q8NGK4</td>\n",
       "      <td>OR52K1</td>\n",
       "      <td>protein</td>\n",
       "      <td>6</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>transmembrane</td>\n",
       "      <td>transmembrane</td>\n",
       "      <td>UniProt_location</td>\n",
       "      <td>generic</td>\n",
       "      <td>locational</td>\n",
       "      <td>resource_specific</td>\n",
       "      <td>Q8IYS2</td>\n",
       "      <td>KIAA2013</td>\n",
       "      <td>protein</td>\n",
       "      <td>7</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        category         parent          database    scope      aspect  \\\n",
       "0  transmembrane  transmembrane  UniProt_location  generic  locational   \n",
       "1  transmembrane  transmembrane  UniProt_location  generic  locational   \n",
       "2  transmembrane  transmembrane  UniProt_location  generic  locational   \n",
       "3  transmembrane  transmembrane  UniProt_location  generic  locational   \n",
       "4  transmembrane  transmembrane  UniProt_location  generic  locational   \n",
       "5  transmembrane  transmembrane  UniProt_location  generic  locational   \n",
       "6  transmembrane  transmembrane  UniProt_location  generic  locational   \n",
       "7  transmembrane  transmembrane  UniProt_location  generic  locational   \n",
       "8  transmembrane  transmembrane  UniProt_location  generic  locational   \n",
       "9  transmembrane  transmembrane  UniProt_location  generic  locational   \n",
       "\n",
       "              source uniprot genesymbol entity_type  consensus_score  \\\n",
       "0  resource_specific  Q96JP9      CDHR1     protein                6   \n",
       "1  resource_specific  Q9P126     CLEC1B     protein                8   \n",
       "2  resource_specific  Q13585      GPR50     protein                6   \n",
       "3  resource_specific  Q8N9I0       SYT2     protein                7   \n",
       "4  resource_specific  O43614     HCRTR2     protein                6   \n",
       "5  resource_specific  A6NJY1   SLC9B1P1     protein                4   \n",
       "6  resource_specific  Q5RI15      COX20     protein                5   \n",
       "7  resource_specific  Q13948       CUX1     protein                5   \n",
       "8  resource_specific  Q8NGK4     OR52K1     protein                6   \n",
       "9  resource_specific  Q8IYS2   KIAA2013     protein                7   \n",
       "\n",
       "   transmitter  receiver  secreted  plasma_membrane_transmembrane  \\\n",
       "0        False     False     False                           True   \n",
       "1        False     False     False                           True   \n",
       "2        False     False     False                           True   \n",
       "3        False     False     False                          False   \n",
       "4        False     False     False                           True   \n",
       "5        False     False     False                          False   \n",
       "6        False     False     False                          False   \n",
       "7        False     False     False                          False   \n",
       "8        False     False     False                          False   \n",
       "9        False     False     False                           True   \n",
       "\n",
       "   plasma_membrane_peripheral  \n",
       "0                       False  \n",
       "1                       False  \n",
       "2                       False  \n",
       "3                       False  \n",
       "4                       False  \n",
       "5                       False  \n",
       "6                       False  \n",
       "7                       False  \n",
       "8                       False  \n",
       "9                       False  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ic.make_df()\n",
    "ic.df[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Browse intercell categories\n",
    "\n",
    "Use the `select` method to access intercell classes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:27:15.163519Z",
     "start_time": "2022-12-02T15:27:15.118303Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AnnotationGroup `neurotensin` from HGNC, 2 elements>"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ic.select(definition = 'neurotensin', parent = 'receptor')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Proteins in each category can be listed with their descriptions from UniProt. Loading the UniProt datasheets for each protein is a slow process, we don't recomment calling this method on more than a few dozens of proteins."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:35:58.169943Z",
     "start_time": "2022-12-02T15:35:57.449110Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=====> [2 proteins] <=====\n",
      "╒═══════╤════════╤══════════════╤══════════╤══════════╤═════════════╤══════════════╤════════════╤══════════════╕\n",
      "│   No. │ ac     │ genesymbol   │   length │   weight │ full_name   │ function_o   │ keywords   │ subcellula   │\n",
      "│       │        │              │          │          │             │ r_genecard   │            │ r_location   │\n",
      "│       │        │              │          │          │             │ s            │            │              │\n",
      "╞═══════╪════════╪══════════════╪══════════╪══════════╪═════════════╪══════════════╪════════════╪══════════════╡\n",
      "│     1 │ O95665 │ NTSR2        │      410 │    45385 │ Neurotensi  │ Receptor     │ Cell       │ Cell         │\n",
      "│       │        │              │          │          │ n receptor  │ for the tr   │ membrane,  │ membrane;    │\n",
      "│       │        │              │          │          │ type 2      │ idecapepti   │ Disulfide  │ Multi-pass   │\n",
      "│       │        │              │          │          │             │"
     ]
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 7598 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ic.show('neurotensin', parent = 'receptor')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gene Ontology <a class=\"anchor\" id=\"gene-ontology\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`pypath.utils.go` is an almost standalone module for management of the Gene Ontology tree and annotations. The main objects here are `GeneOntology` and `GOAnnotation`. The former represents the ontology tree, i.e. terms and their relationships, the latter their assignment to gene products. Both provides many versatile methods for querying."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:36:46.059721Z",
     "start_time": "2022-12-02T15:36:44.796832Z"
    }
   },
   "outputs": [],
   "source": [
    "from pypath.utils import go\n",
    "goa = go.GOAnnotation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:36:48.863117Z",
     "start_time": "2022-12-02T15:36:48.859703Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pypath.utils.go.GeneOntology at 0x689946b55570>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "goa.ontology # the GeneOntology object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:36:50.648586Z",
     "start_time": "2022-12-02T15:36:50.644257Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pypath.utils.go.GOAnnotation at 0x68991cdc9b40>"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "goa # the GOAnnotation object"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Among many others, the most versatile method is `select` which is able to select the annotated gene products by various expressions built from GO terms or IDs. It understands `AND`, `OR`, `NOT` and parentheses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:36:55.072995Z",
     "start_time": "2022-12-02T15:36:54.983381Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['P21333', 'P80108', 'P62258', 'Q9NRX4', 'P54710', 'Q8NER1', 'P01303']\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"(cell surface OR\n",
    "        external side of plasma membrane OR\n",
    "        extracellular region) AND\n",
    "        (regulation of transmembrane transporter activity OR\n",
    "        channel regulator activity)\"\"\"\n",
    "result = goa.select(query)\n",
    "print(list(result)[:7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:36:56.986264Z",
     "start_time": "2022-12-02T15:36:56.974560Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'GO:0001507',\n",
       " 'GO:0001527',\n",
       " 'GO:0003351',\n",
       " 'GO:0003355',\n",
       " 'GO:0005201',\n",
       " 'GO:0005576',\n",
       " 'GO:0005577',\n",
       " 'GO:0005582',\n",
       " 'GO:0005583',\n",
       " 'GO:0005584',\n",
       " 'GO:0005585',\n",
       " 'GO:0005586',\n",
       " 'GO:0005587',\n",
       " 'GO:0005588',\n",
       " 'GO:0005590',\n",
       " 'GO:0005591',\n",
       " 'GO:0005592',\n",
       " 'GO:0005595',\n",
       " 'GO:0005596',\n",
       " 'GO:0005599',\n",
       " 'GO:0005601',\n",
       " 'GO:0005602',\n",
       " 'GO:0005604',\n",
       " 'GO:0005606',\n",
       " 'GO:0005607',\n",
       " 'GO:0005608',\n",
       " 'GO:0005609',\n",
       " 'GO:0005610',\n",
       " 'GO:0005611',\n",
       " 'GO:0005612',\n",
       " 'GO:0005614',\n",
       " 'GO:0005615',\n",
       " 'GO:0005616',\n",
       " 'GO:0006858',\n",
       " 'GO:0006859',\n",
       " 'GO:0006860',\n",
       " 'GO:0009519',\n",
       " 'GO:0010367',\n",
       " 'GO:0016914',\n",
       " 'GO:0016942',\n",
       " 'GO:0020003',\n",
       " 'GO:0020004',\n",
       " 'GO:0020005',\n",
       " 'GO:0020006',\n",
       " 'GO:0030020',\n",
       " 'GO:0030021',\n",
       " 'GO:0030023',\n",
       " 'GO:0030197',\n",
       " 'GO:0030345',\n",
       " 'GO:0030934',\n",
       " 'GO:0030935',\n",
       " 'GO:0030938',\n",
       " 'GO:0031012',\n",
       " 'GO:0031395',\n",
       " 'GO:0032311',\n",
       " 'GO:0032579',\n",
       " 'GO:0033165',\n",
       " 'GO:0033166',\n",
       " 'GO:0034358',\n",
       " 'GO:0034359',\n",
       " 'GO:0034360',\n",
       " 'GO:0034361',\n",
       " 'GO:0034362',\n",
       " 'GO:0034363',\n",
       " 'GO:0034364',\n",
       " 'GO:0034365',\n",
       " 'GO:00343"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 3104 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "goa.ontology.get_all_descendants('GO:0005576')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Protein complexes <a class=\"anchor\" id=\"complexes\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `pypath.complex` module builds a non-redundant list of complexes from about 12 original resources. Complexes are unique considering their set of components, and optionally carry stoichiometry information. Homomultimers are also included, hence some complexes consist only of a single kind of protein. The database is an instance of `pypath.core.complex.ComplexAggregator` object and the built by the `pypath.core.complex.get_db` function.\n",
    "\n",
    "<div class=\"alert alert-block alert-warning\"><b>Warning:</b> it is recommended to access databases <a href=\"#co-dbmanager\">by the manager</a>. Running the code below takes really long and does not save or reload the database, it builds a fresh copy each time.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:39:31.069128Z",
     "start_time": "2022-12-02T15:39:30.708117Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Complex database: 28173 complexes>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pypath.core import complex\n",
    "co = complex.get_db()\n",
    "co.update_index()\n",
    "co"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To retrieve all complexes containing a specific protein, here MTOR:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:39:42.824102Z",
     "start_time": "2022-12-02T15:39:42.819187Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{Complex: COMPLEX:O00141_O15530_O75879_P23443_P34931_P42345_Q6R327_Q8N122_Q9BPZ7_Q9BVC4_Q9H672,\n",
       " Complex: COMPLEX:O00141_O15530_P07900_P23443_P31749_P31751_P42345_P78527_Q05513_Q05655_Q6R327_Q8N122_Q9BPZ7_Q9BVC4,\n",
       " Complex: COMPLEX:O00141_O15530_P0CG47_P0CG48_P23443_P42345_Q15118_Q6R327_Q8N122_Q96BR1_Q9BPZ7_Q9BVC4,\n",
       " Complex: COMPLEX:O00141_O15530_P23443_P42345_Q15118_Q6R327_Q8N122_Q96BR1_Q96J02_Q9BPZ7_Q9BVC4,\n",
       " Complex: COMPLEX:O00141_O75879_P0CG48_P23443_P34931_P42345_P62753_Q6R327_Q8N122_Q9BPZ7_Q9BVC4_Q9NY26,\n",
       " Complex: COMPLEX:O00141_P0CG48_P23443_P36894_P42345_P62942_P68106_Q15427_Q6R327_Q8N122_Q9BPZ7_Q9BVC4,\n",
       " Complex: COMPLEX:O00141_P0CG48_P23443_P42345_P46781_P62753_Q6R327_Q8N122_Q96KQ7_Q9BPZ7_Q9BVC4_Q9NY26,\n",
       " Complex: COMPLEX:O00141_P0CG48_P23443_P42345_P62753_P62942_Q6R327_Q8N122_Q9BPZ7_Q9BVC4_Q9NY26,\n",
       " Complex: COMPLEX:O00141_P0CG48_P23443_P42345_P62753_Q15172_Q6R327_Q8IW41_Q9BPZ7_Q9BVC4_Q9H672,\n",
       " Complex: COMPLEX:O00141_P0CG48_P23443_P42345_P62753_Q6R327_Q70Z35_Q8N122_Q8TCU6_Q9BPZ7"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 5348 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "co.proteins['P42345']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note some of the complexes have human readable names, these are preferred at printing if available from any of the databases. Otherwise the complexes are labelled by `COMPLEX:list-of-components`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Protein complex objects\n",
    "\n",
    "Take a closer look on one complex object. The hash of the is equivalent with the string representation below, where the UniProt IDs are unique and alphabetically sorted. Hence you can look up complexes using strings as keys despite the dict keys are in fact `pypath.intera.Complex` objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:41:36.557282Z",
     "start_time": "2022-12-02T15:41:36.552728Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Complex CBP/p300: COMPLEX:Q09472_Q92793"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cplex = co.complexes['COMPLEX:Q09472_Q92793']\n",
    "cplex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:41:38.271651Z",
     "start_time": "2022-12-02T15:41:38.267131Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Q92793': 1, 'Q09472': 1}"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cplex.components # stoichiometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:41:39.693944Z",
     "start_time": "2022-12-02T15:41:39.688511Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Signor'}"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cplex.sources # resources"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Protein complex data frame\n",
    "\n",
    "The database can be exported into a `pandas.DataFrame`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-03T15:47:16.115381Z",
     "start_time": "2022-12-03T15:47:12.712922Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>components</th>\n",
       "      <th>components_genesymbols</th>\n",
       "      <th>stoichiometry</th>\n",
       "      <th>sources</th>\n",
       "      <th>references</th>\n",
       "      <th>identifiers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NFY</td>\n",
       "      <td>P23511_P25208_Q13952</td>\n",
       "      <td>NFYA_NFYB_NFYC</td>\n",
       "      <td>1:1:1</td>\n",
       "      <td>CORUM;Compleat;PDB;Signor;ComplexPortal;hu.MAP...</td>\n",
       "      <td>15243141;14755292;9372932</td>\n",
       "      <td>Signor:SIGNOR-C1;CORUM:4478;Compleat:HC1449;in...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mTORC2</td>\n",
       "      <td>P68104_P85299_Q6R327_Q8TB45_Q9BVC4</td>\n",
       "      <td>DEPTOR_EEF1A1_MLST8_PRR5_RICTOR</td>\n",
       "      <td>0:0:0:0:0</td>\n",
       "      <td>Signor</td>\n",
       "      <td></td>\n",
       "      <td>Signor:SIGNOR-C2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>mTORC1</td>\n",
       "      <td>P42345_Q8N122_Q8TB45_Q96B36_Q9BVC4</td>\n",
       "      <td>AKT1S1_DEPTOR_MLST8_MTOR_RPTOR</td>\n",
       "      <td>0:0:0:0:0</td>\n",
       "      <td>Signor</td>\n",
       "      <td></td>\n",
       "      <td>Signor:SIGNOR-C3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SCF-betaTRCP</td>\n",
       "      <td>P63208_Q13616_Q9Y297</td>\n",
       "      <td>BTRC_CUL1_SKP1</td>\n",
       "      <td>1:1:1</td>\n",
       "      <td>CORUM;Compleat;Signor</td>\n",
       "      <td>9990852</td>\n",
       "      <td>Signor:SIGNOR-C5;CORUM:227;Compleat:HC757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CBP/p300</td>\n",
       "      <td>Q09472_Q92793</td>\n",
       "      <td>CREBBP_EP300</td>\n",
       "      <td>0:0</td>\n",
       "      <td>Signor</td>\n",
       "      <td></td>\n",
       "      <td>Signor:SIGNOR-C6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28168</th>\n",
       "      <td>Npnt complex 2</td>\n",
       "      <td>Q5SZK8_Q6UXI9_Q86XX4</td>\n",
       "      <td>FRAS1_FREM2_NPNT</td>\n",
       "      <td>0:0:0</td>\n",
       "      <td>CellChatDB</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28169</th>\n",
       "      <td>NRP1_NRP2</td>\n",
       "      <td>O14786_O60462_Q9Y4D7</td>\n",
       "      <td>NRP1_NRP2_PLXND1</td>\n",
       "      <td>0:0:0</td>\n",
       "      <td>CellChatDB</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28170</th>\n",
       "      <td>NRP2_PLXNA2</td>\n",
       "      <td>O60462_O75051</td>\n",
       "      <td>NRP2_PLXNA2</td>\n",
       "      <td>0:0</td>\n",
       "      <td>CellChatDB</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28171</th>\n",
       "      <td>NRP2_PLXNA4</td>\n",
       "      <td>O60462_Q9HCM2</td>\n",
       "      <td>NRP2_PLXNA4</td>\n",
       "      <td>0:0</td>\n",
       "      <td>CellChatDB</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28172</th>\n",
       "      <td>PTCH2_SMO</td>\n",
       "      <td>Q99835_Q9Y6C5</td>\n",
       "      <td>PTCH2_SMO</td>\n",
       "      <td>0:0</td>\n",
       "      <td>CellChatDB</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>28173 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 name                          components  \\\n",
       "0                 NFY                P23511_P25208_Q13952   \n",
       "1              mTORC2  P68104_P85299_Q6R327_Q8TB45_Q9BVC4   \n",
       "2              mTORC1  P42345_Q8N122_Q8TB45_Q96B36_Q9BVC4   \n",
       "3        SCF-betaTRCP                P63208_Q13616_Q9Y297   \n",
       "4            CBP/p300                       Q09472_Q92793   \n",
       "...               ...                                 ...   \n",
       "28168  Npnt complex 2                Q5SZK8_Q6UXI9_Q86XX4   \n",
       "28169       NRP1_NRP2                O14786_O60462_Q9Y4D7   \n",
       "28170     NRP2_PLXNA2                       O60462_O75051   \n",
       "28171     NRP2_PLXNA4                       O60462_Q9HCM2   \n",
       "28172       PTCH2_SMO                       Q99835_Q9Y6C5   \n",
       "\n",
       "                components_genesymbols stoichiometry  \\\n",
       "0                       NFYA_NFYB_NFYC         1:1:1   \n",
       "1      DEPTOR_EEF1A1_MLST8_PRR5_RICTOR     0:0:0:0:0   \n",
       "2       AKT1S1_DEPTOR_MLST8_MTOR_RPTOR     0:0:0:0:0   \n",
       "3                       BTRC_CUL1_SKP1         1:1:1   \n",
       "4                         CREBBP_EP300           0:0   \n",
       "...                                ...           ...   \n",
       "28168                 FRAS1_FREM2_NPNT         0:0:0   \n",
       "28169                 NRP1_NRP2_PLXND1         0:0:0   \n",
       "28170                      NRP2_PLXNA2           0:0   \n",
       "28171                      NRP2_PLXNA4           0:0   \n",
       "28172                        PTCH2_SMO           0:0   \n",
       "\n",
       "                                                 sources  \\\n",
       "0      CORUM;Compleat;PDB;Signor;ComplexPortal;hu.MAP...   \n",
       "1                                                 Signor   \n",
       "2                                                 Signor   \n",
       "3                                  CORUM;Compleat;Signor   \n",
       "4                                                 Signor   \n",
       "...                                                  ...   \n",
       "28168                                         CellChatDB   \n",
       "28169                                         CellChatDB   \n",
       "28170                                         CellChatDB   \n",
       "28171                                         CellChatDB   \n",
       "28172                                         CellChatDB   \n",
       "\n",
       "                      references  \\\n",
       "0      15243141;14755292;9372932   \n",
       "1                                  \n",
       "2                                  \n",
       "3                        9990852   \n",
       "4                                  \n",
       "...                          ...   \n",
       "28168                              \n",
       "28169                              \n",
       "28170                              \n",
       "28171                              \n",
       "28172                              \n",
       "\n",
       "                                             identifiers  \n",
       "0      Signor:SIGNOR-C1;CORUM:4478;Compleat:HC1449;in...  \n",
       "1                                       Signor:SIGNOR-C2  \n",
       "2                                       Signor:SIGNOR-C3  \n",
       "3              Signor:SIGNOR-C5;CORUM:227;Compleat:HC757  \n",
       "4                                       Signor:SIGNOR-C6  \n",
       "...                                                  ...  \n",
       "28168                                                     \n",
       "28169                                                     \n",
       "28170                                                     \n",
       "28171                                                     \n",
       "28172                                                     \n",
       "\n",
       "[28173 rows x 7 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "co.make_df()\n",
    "co.df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving datasets as pickles <a class=\"anchor\" id=\"pickle\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The large datasets above are compiled from many resources. Even if these are already available in the cache, the data processing often takes longer than convenient, e.g. from a few minutes up to half an hour. Most of the data integration objects in `pypath` provide methods to save and load their contents as pickle dumps. In fact, the database manager does this all the time, in a coordinated way -- for this reason, the methods below should be used only with good reason, and relying on the database manager is preferred."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for `pypath.annot.AnnotationTable` objects:\n",
    "a.save_to_pickle('myannots.pickle')\n",
    "a = annot.AnnotationTable(pickle_file = 'myannots.pickle')\n",
    "# for `pypath.complex.ComplexAggregator` objects:\n",
    "complexdb.save_to_pickle('mycomplexes.pickle')\n",
    "complexdb = complex.ComplexAggregator(pickle_file = 'mycomplexes.pickle')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Log messages and sessions <a class=\"anchor\" id=\"log-session\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In `pypath` all modules sends messages to a log file named by default by the session ID (a 5 char random string). The default path to the log file is `./pypath_log/pypath-xxxxx.log` where `xxxxx` is the session ID.\n",
    "\n",
    "<div class=\"alert alert-block alert-warning\"><b>Warning:</b> The logger of <em>pypath</em> is really verbose, the log files can grow huge: several tens of thousands of lines, few MBs. It is recommended to empty the <em>pypath_log</em> directories time to time.</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic info about the session\n",
    "\n",
    "The `info` function prints the most important information about the current session:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:41:55.746575Z",
     "start_time": "2022-12-02T15:41:55.743592Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2022-12-02 16:41:55] [pypath] \n",
      "\t- session ID: `l0n17`\n",
      "\t- working directory: `/home/denes/pypath/notebooks`\n",
      "\t- logfile: `/home/denes/pypath/notebooks/pypath_log/pypath-l0n17.log`\n",
      "\t- pypath version: 0.14.31\n"
     ]
    }
   ],
   "source": [
    "import pypath\n",
    "pypath.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another function prints a disclaimer about licenses. Until recently this message was printed every time upon import, it is still important, but we removed it as in certain situations it can be annoying."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:41:59.555630Z",
     "start_time": "2022-12-02T15:41:59.552243Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\t=== d i s c l a i m e r ===\n",
      "\n",
      "\tAll data accessed through this module,\n",
      "\teither as redistributed copy or downloaded using the\n",
      "\tprogrammatic interfaces included in the present module,\n",
      "\tare free to use at least for academic research or\n",
      "\teducation purposes.\n",
      "\tPlease be aware of the licenses of all the datasets\n",
      "\tyou use in your analysis, and please give appropriate\n",
      "\tcredits for the original sources when you publish your\n",
      "\tresults. To find out more about data sources please\n",
      "\tlook at `pypath/resources/data/resources.json` or\n",
      "\thttps://omnipathdb.org/info and \n",
      "\t`pypath.resources.urls.urls`.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pypath.disclaimer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read the log file\n",
    "\n",
    "Calling ``pypath.log`` opens the logfile by the default console application for paginating text files (in GNU systems typically ``less``):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:42:08.424260Z",
     "start_time": "2022-12-02T15:42:08.354352Z"
    }
   },
   "outputs": [],
   "source": [
    "pypath.log()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The logger and the log file are bound to the session (the 5 random characters is the session ID):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:42:27.611191Z",
     "start_time": "2022-12-02T15:42:27.605545Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Session l0n17>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pypath.session"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The logger:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:42:46.724382Z",
     "start_time": "2022-12-02T15:42:46.717248Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Logger [/home/denes/pypath/notebooks/pypath_log/pypath-l0n17.log]"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pypath.session.log"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The path to the log file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:42:49.629139Z",
     "start_time": "2022-12-02T15:42:49.621082Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/denes/pypath/notebooks/pypath_log/pypath-l0n17.log'"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pypath.session.log.fname"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logging to the console\n",
    "\n",
    "Each log message has a numeric priority level, and messages with lower level than a threshold are printed to the console. By default only important warnings are dispatched to the console. To log everything to the console, set the threshold to a large number:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:42:56.120444Z",
     "start_time": "2022-12-02T15:42:55.787700Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2022-12-02 16:42:55] [curl] Creating Curl object to retrieve data from `https://signor.uniroma2.it/download_complexes.php`\n",
      "[2022-12-02 16:42:55] [curl] Cache file path: `/home/denes/.pypath/cache/d7b8673e83e43a01c533f9de5a2b04b9-download_complexes.php`\n",
      "[2022-12-02 16:42:55] [curl] Cache file found, no need for download.\n",
      "[2022-12-02 16:42:55] [curl] Opening plain text file `/home/denes/.pypath/cache/d7b8673e83e43a01c533f9de5a2b04b9-download_complexes.php`.\n",
      "[2022-12-02 16:42:55] [curl] Creating Curl object to retrieve data from `https://signor.uniroma2.it/download_complexes.php`\n",
      "[2022-12-02 16:42:55] [curl] Cache file path: `/home/denes/.pypath/cache/d7b8673e83e43a01c533f9de5a2b04b9-download_complexes.php`\n",
      "[2022-12-02 16:42:55] [curl] Cache file found, no need for download.\n",
      "[2022-12-02 16:42:55] [curl] Opening plain text file `/home/denes/.pypath/cache/d7b8673e83e43a01c533f9de5a2b04b9-download_complexes.php`.\n",
      "[2022-12-02 16:42:55] [curl] Creating Curl object to retrieve data from `https"
     ]
    },
    {
     "data": {
      "text/html": [
       "<em>Output truncated: showing 1000 of 1046 characters</em>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pypath.session.log.console_level = 10\n",
    "\n",
    "from pypath.inputs import signor\n",
    "\n",
    "si = signor.signor_interactions()\n",
    "pypath.session.log.console_level = -1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Disable logging\n",
    "\n",
    "To avoid creation of a log file (and the directory `pypath_log`) set the environment variable `PYPATH_LOG` or the `builtins.PYPATH_LOG` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# shell:\n",
    "export PYPATH_LOG=\"/dev/null\"\n",
    "# then, start Python and use pypath"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:43:10.716053Z",
     "start_time": "2022-12-02T15:43:10.710658Z"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import builtins\n",
    "builtins.PYPATH_LOG=os.devnull\n",
    "import pypath"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Write to the log\n",
    "\n",
    "#### Sending a single message\n",
    "\n",
    "First we change the console level so we can see the log messages. The label is optional. The priority of the message is given by the `level`, notice that the second message won't be printed to the console as its level is higher than 10:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:43:13.777984Z",
     "start_time": "2022-12-02T15:43:13.771286Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2022-12-02 16:43:13] [book] Greetings from the pypath tutorial notebook! :)\n"
     ]
    }
   ],
   "source": [
    "pypath.session.log.console_level = 10\n",
    "pypath.session.log.msg('Greetings from the pypath tutorial notebook! :)', label = 'book')\n",
    "pypath.session.log.msg('Not important, not shown on console but printed to the logfile.', level = 11)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Connect a module or class to the pypath logger\n",
    "\n",
    "The preferred way of connecting to the logger is to make a class inherit from the `Logger` class. Here the `name` will be the default label for all messages coming from the instances of this class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:43:17.429331Z",
     "start_time": "2022-12-02T15:43:17.425872Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2022-12-02 16:43:17] [child] Have a nice day! :D\n"
     ]
    }
   ],
   "source": [
    "from pypath.share import session\n",
    "\n",
    "class ChildOfLogger(session.Logger):\n",
    "    \n",
    "    def __init__(self):\n",
    "        \n",
    "        session.Logger.__init__(self, name = 'child')\n",
    "    \n",
    "    def say_something(self):\n",
    "        \n",
    "        self._log('Have a nice day! :D')\n",
    "\n",
    "\n",
    "col = ChildOfLogger()\n",
    "col.say_something()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, a logger can be created anywhere and used from any module or function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:43:20.372472Z",
     "start_time": "2022-12-02T15:43:20.367496Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2022-12-02 16:43:20] [mylogger] Message from a stray logger\n"
     ]
    }
   ],
   "source": [
    "from pypath.share import session\n",
    "\n",
    "_logger = session.Logger(name = 'mylogger')\n",
    "_log = _logger._log\n",
    "\n",
    "_log('Message from a stray logger')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally we just set the console level to a lower value, to avoid flooding the rest of this book with log messages:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-12-02T15:43:23.621368Z",
     "start_time": "2022-12-02T15:43:23.615302Z"
    }
   },
   "outputs": [],
   "source": [
    "pypath.session.log.console = -1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## BEL export <a class=\"anchor\" id=\"bel\"></a>\n",
    "\n",
    "<div class=\"alert alert-block alert-danger\"><b>Warning:</b> This section hasn't been thoroughly revised for long time, some parts might be outdated or broken.</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Biological Expression Language (BEL, https://bel-commons.scai.fraunhofer.de/) is a versatile description language to capture relationships between various biological entities spanning wide range of the levels of biological organization. `pypath` has a dedicated module to convert the network and the enzyme-substrate interactions to BEL format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pypath.legacy import main\n",
    "from pypath.resources import data_formats\n",
    "from pypath.omnipath import bel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa = main.PyPath()\n",
    "pa.init_network(data_formats.pathway)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can provide one or more resources to the `Bel` class. Supported resources currently are `pypath.main.PyPath` and `pypath.ptm.PtmAggregator`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = bel.Bel(resource = pa)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the resources we compile a `BELGraph` object which provides a Python interface for various operations and you can also export the data in BEL format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b.main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b.bel_graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b.bel_graph.summarize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b.export_relationships('omnipath_pathways.bel')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('omnipath_pathways.bel', 'r') as fp:\n",
    "    bel_str = fp.read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(bel_str[:333])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CellPhoneDB export <a class=\"anchor\" id=\"cellphonedb\"></a>\n",
    "\n",
    "<div class=\"alert alert-block alert-danger\"><b>Warning:</b> This section hasn't been thoroughly revised for long time, some parts might be outdated or broken.</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "CellPhoneDB is a statistical method and a database for inferring inter-cellular communication pathways between specific cell types from single-cell data. OmniPath/pypath uses CellPhoneDB as a resource for interaction, protein complex and annotation data. Apart from this, pypath is able to export its data in the appropriate format to provide input for the CellPhoneDB Python module. For this you can use the `pypath.cellphonedb` module:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pypath.omnipath import cellphonedb\n",
    "from pypath.share import settings\n",
    "\n",
    "settings.setup(network_expand_complexes = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here you can provide parameters for the network or provide an already built network. Also you can provide the datasets as pickles to make them load really fast. Otherwise this step will take quite long."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = cellphonedb.CellPhoneDB()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can access each of the CellPhoneDB input files as a `pandas.DataFrame` and also they've been exported to csv files. For example the `interaction_input.csv` contains interactions from all the resources used for building the network (here Signor, SingnaLink, etc.):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.interaction_dataframe[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The proteins and complexes are annotated (transmembrane, peripheral, secreted, etc.) using data from the `pypath.intercell` module (identical to the http://omnipathdb.org/intercell query of the web service):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.protein_dataframe[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The legacy *igraph*-based network object <a class=\"anchor\" id=\"legacy\"></a>\n",
    "\n",
    "<div class=\"alert alert-block alert-danger\"><b>Warning:</b> This section hasn't been thoroughly revised for long time, some parts might be outdated or broken.</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Until about 2019 (before pypath version 0.9) ``pypath`` used an `igraph.Graph` object ([igraph.org](http://igraph.org/)) to organize all data structures around. This legacy API still present in ``pypath.legacy.main``, however it is not maintained. This section of the book is still here, but will be removed soon, along with the `legacy` module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No module `cairo` available.\n",
      "Some plotting functionalities won't be accessible.\n"
     ]
    }
   ],
   "source": [
    "from pypath.legacy import main"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa = main.PyPath()\n",
    "#pa.load_omnipath() # This is commented out because it takes > 1h \n",
    "                    # to run it for the first time due to the vast\n",
    "                    # amount of data download.\n",
    "                    # Once you populated the cache it still takes\n",
    "                    # approx. 30 min to build the entire OmniPath\n",
    "                    # as the process consists of quite some data\n",
    "                    # processing. If you dump it in a pickle, you\n",
    "                    # can load the network in < 1 min"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### I just want a network quickly and play around with *pypath* <a class=\"anchor\" id=\"legacy-quick-start\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can find the predefined formats in the ``pypath.resources.network`` module. For example, to load one resource from there, let's say SIGNOR:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pypath.legacy import main\n",
    "from pypath.resources import network as netres\n",
    "pa = main.PyPath()\n",
    "pa.load_resources({'signor': netres.pathway['signor']})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or to load all *activity flow* resources with *literature references:*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pypath.legacy import main\n",
    "from pypath.resources import network as netres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa = main.PyPath()\n",
    "pa.init_network(netres.pathway)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or to load all *activity flow* resources, including the ones without literature references:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa = main.PyPath()\n",
    "pa.init_network(data_formats.pathway_all)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How do I build networks from any data with *pypath*? <a class=\"anchor\" id=\"legacy-quick-start-2\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we show how to build a network from your own files. The advantage of building network with pypath is that you don't need to worry about merging redundant elements, neither about different formats and identifiers. Let's say you have two files with network data:\n",
    "\n",
    "**network1.csv**\n",
    "\n",
    "    entrezA,entrezB,effect\n",
    "    1950,1956,inhibition\n",
    "    5290,207,stimulation\n",
    "    207,2932,inhibition\n",
    "    1956,5290,stimulation\n",
    "\n",
    "**network2.sif**\n",
    "\n",
    "    EGF + EGFR\n",
    "    EGFR + PIK3CA\n",
    "    EGFR + SOS1\n",
    "    PIK3CA + RAC1\n",
    "    RAC1 + MAP3K1\n",
    "    SOS1 + HRAS\n",
    "    HRAS + MAP3K1\n",
    "    PIK3CA + AKT1\n",
    "    AKT1 - GSK3B\n",
    "    \n",
    "*Note: you need to create these files in order to load them.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Defining input formats <a class=\"anchor\" id=\"input-formats\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pypath\n",
    "import pypath.iinput_formats as input_formats\n",
    "\n",
    "input1 = input_formats.ReadSettings(\n",
    "    name = 'egf1',\n",
    "    input = 'network1.csv',\n",
    "    header = True,\n",
    "    separator = ',',\n",
    "    id_col_a = 0,\n",
    "    id_col_b = 1,\n",
    "    id_type_a = 'entrez',\n",
    "    id_type_b = 'entrez',\n",
    "    sign = (2, 'stimulation', 'inhibition'),\n",
    "    ncbi_tax_id = 9606,\n",
    ")\n",
    "\n",
    "input2 = input_formats.ReadSettings(\n",
    "    name = 'egf2',\n",
    "    input = 'network2.sif',\n",
    "    separator = ' ',\n",
    "    id_col_a = 0,\n",
    "    id_col_b = 2,\n",
    "    id_type_a = 'genesymbol',\n",
    "    id_type_b = 'genesymbol',\n",
    "    sign = (1, '+', '-'),\n",
    "    ncbi_tax_id = 9606,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Creating PyPath object and loading the 2 test files <a class=\"anchor\" id=\"toy-example\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs = {\n",
    "    'egf1': input1,\n",
    "    'egf2': input2\n",
    "}\n",
    "\n",
    "pa = main.PyPath()\n",
    "pa.reload()\n",
    "pa.init_network(lst = inputs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Structure of the legacy network object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pypath.legacy import main as legacy\n",
    "pa = legacy.PyPath()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa.graph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Number of edges and nodes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa.ecount, pa.vcount"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The edge and vertex sequences you can access in the `es` and `vs` attributes, you can iterate these or index by integers. The edge and vertex attributes you can access by string keys. E.g. get the sources of edge 0:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa.graph.es[81]['sources']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Directions and signs <a class=\"anchor\" id=\"directions\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default the `igraph` object is undirected but it carries all direction information in Python objects assigned to each edge. Pypath can convert it to a directed `igraph` object, but you still need the `Direction` objects to have the signs, as `igraph` has no signed network representation. Certain methods need the directed `igraph` object and they will automatically create it, but you can create it manually:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa.get_directed()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You find the directed network in the `pa.dgraph` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa.dgraph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's take a look on the `pypath.main.Direction` objects which contain details about directions and signs. First as an example, select a random edge:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "edge = pa.graph.es[3241]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `Direction` object is in the `dirs` edge attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d = edge['dirs']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It has a method to print its content a human readable way:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(pa.graph.es[3241]['dirs'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this we see the databases phosphoELM and Signor agree that protein `P17252` has an effect on `Q15139` and Signor in addition tells us this effect is stimulatory. However in your scripts you can query the `Direction` objects a number of ways. Each `Direction` object calls the two possible directions either straight or reverse:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.straight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.reverse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can tell you if one of these directions is supported by any of the network resources:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.get_dir(d.straight)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or it can return those resources:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.get_dir(d.straight, sources = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The opposite direction is not supported by any resource:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.get_dir(d.reverse, sources = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similar way the signs can be queried. The returned pair of boolean values mean if the interaction in this direction is stimulatory or inhibitory, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.get_sign(d.straight)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or you can ask whether it is inhibition:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.is_inhibition(d.straight)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or if the interaction is directed at all:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.is_directed()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes resources don't agree, for example one tells an interaction is inhibition while according to others it is stimulation; or one tells A effects B and another resource the other way around. Here we preserve all these potentially contradicting information in the `Direction` object and at the end you decide what to do with it depending on your purpose. If you want to get rid of ambiguity there is a method to get a consensus direction and sign which returns the attributes the most resources agree on: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.consensus_edges()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Accessing nodes in the network <a class=\"anchor\" id=\"nodes\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In `igraph` the vertices are numbered but this numbering can change at certain operations. Instead the we can use the vertex attributes. In `PyPath` for proteins the `name` attribute is UniProt ID by default and the `label` is Gene Symbol."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa.graph.vs['name'][:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa.graph.vs['label'][:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `PyPath` object offers a number of helper methods to access the nodes by their names. For example, `uniprot` or `up` returns the `igraph.Vertex` for a UniProt ID:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "type(pa.up('P00533'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly `genesymbol` or `gs` for Gene Symbols:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "type(pa.gs('ESR1'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each of these has a \"plural\" version:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(list(pa.gss(['MTOR', 'ATG16L2', 'ULK1'])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And a generic method where you can mix UniProts and Gene Symbols:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(list(pa.proteins(['MTOR', 'P00533'])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Querying relationships with our without causality <a class=\"anchor\" id=\"causality\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above you could see how to query the directions and names of individual edges and nodes. Building on top of these, other methods give a way to query causality, i.e. which proteins are affected by an other one, and which others are its regulators. The example below returns the nodes PIK3CA is stimulated by, the `gs` prefix tells we query by the Gene Symbol:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pa.gs_stimulated_by('PIK3CA')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It returns a so called `_NamedVertexSeq` object, which you can get a series of `igraph.Vertex` objects or Gene Symbols or UniProt IDs from:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list(pa.gs_stimulated_by('PIK3CA').gs())[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list(pa.gs_stimulated_by('PIK3CA').up())[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note, the names of these methods are a bit contraintuitive, the for example the `gs_stimulates` returns the genes stimulated by PIK3CA:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list(pa.gs_stimulates('PIK3CA').gs())[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'PIK3CA' in set(pa.affected_by('AKT1').gs())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are many similary methods, `inhibited_by` returns negative regulators, `affected_by` does not consider +/- signs, without `gs_` and `up_` prefixes you can provide either of these identifiers, `neighbors` does not consider the direction. At the end `.gs()` converts the result for a list of Gene Symbols, `up()` to UniProts, `.ids()` to vertex IDs and by default it yields `igraph.Vertex` objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list(pa.neighbors('AKT1').ids())[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, with `neighborhood` methods return the indirect neighborhood in custom number of steps (however size of the neighborhood increases rapidly with number of steps):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(list(pa.neighborhood('ATG3', 1).gs()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(list(pa.neighborhood('ATG3', 2).gs()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(list(pa.neighborhood('ATG3', 3).gs()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(list(pa.neighborhood('ATG3', 4).gs()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Accessing edges by identifiers <a class=\"anchor\" id=\"edge-lookup\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Just like nodes also edges can be accessed by identifiers like Gene Symbols. `get_edge` returns an `igraph.Edge` if the edge exists otherwise `None`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "type(pa.get_edge('EGF', 'EGFR'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "type(pa.get_edge('EGF', 'P00533'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "type(pa.get_edge('EGF', 'AKT1'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(pa.get_edge('EGF', 'EGFR')['dirs'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Literature references <a class=\"anchor\" id=\"references\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Select a random edge and in the `references` attribute you find a list of references:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "edge = pa.get_edge( 'MAP1LC3B', 'SQSTM1')\n",
    "edge['references']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each reference has a PubMed ID:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "edge['references'][0].pmid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "edge['references'][0].open()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These 3 references come from 3 different databases, but there must be 2 overlaps between them:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "edge['refs_by_source']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the network with *igraph* <a class=\"anchor\" id=\"plot\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we use the network created above (because it is reasonable size, not like the networks we could get from most of the network databases). Igraph has excellent plotting abilities built on top of the *cairo* library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import igraph\n",
    "plot = igraph.plot(pa.graph, target = 'egf_network.png',\n",
    "            edge_width = 0.3, edge_color = '#777777',\n",
    "            vertex_color = '#97BE73', vertex_frame_width = 0,\n",
    "            vertex_size = 70.0, vertex_label_size = 15,\n",
    "            vertex_label_color = '#FFFFFF',\n",
    "            # due to a bug in either igraph or IPython, \n",
    "            # vertex labels are not visible on inline plots:\n",
    "            inline = False, margin = 120)\n",
    "from IPython.display import Image\n",
    "Image(filename='egf_network.png')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {
    "height": "1278px",
    "width": "347px"
   },
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Contents",
   "title_sidebar": "The pypath book",
   "toc_cell": true,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "511.6px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "toc-autonumbering": true,
  "toc-showcode": false,
  "toc-showmarkdowntxt": false,
  "toc-showtags": false
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
